// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * QC Read API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

package read

import (
	"context"
	"encoding/json"
	"github.com/DogeProtocol/dp/log"
	"github.com/DogeProtocol/dp/relay"
	"github.com/DogeProtocol/dp/common"
	"github.com/DogeProtocol/dp/common/hexutil"
	"github.com/DogeProtocol/dp/rpc"
	"net/http"
	"errors"
	"github.com/mattn/go-colorable"
	"strconv"
)

// ReadApiAPIService is a service that implements the logic for the ReadApiAPIServicer
// This service should implement the business logic for every endpoint for the ReadApiAPI API.
// Include any external packages or services that will be required by this service.
type ReadApiAPIService struct {

}

type RPCTransaction struct {
	BlockHash        *common.Hash      `json:"blockHash"`
	BlockNumber      *hexutil.Big      `json:"blockNumber"`
	From             common.Address    `json:"from"`
	Gas              hexutil.Uint64    `json:"gas"`
	GasPrice         *hexutil.Big      `json:"gasPrice"`
	GasFeeCap        *hexutil.Big      `json:"maxFeePerGas,omitempty"`
	Hash             common.Hash       `json:"hash"`
	Input            hexutil.Bytes     `json:"input"`
	Nonce            hexutil.Uint64    `json:"nonce"`
	To               *common.Address   `json:"to"`
	TransactionIndex *hexutil.Uint64   `json:"transactionIndex"`
	Value            *hexutil.Big      `json:"value"`
	Type             hexutil.Uint64    `json:"type"`
}

// NewReadApiAPIService creates a default api service
func NewReadApiAPIService() *ReadApiAPIService {
	log.Root().SetHandler(log.LvlFilterHandler(log.Lvl(3), log.StreamHandler(colorable.NewColorableStderr(), log.TerminalFormat(true))))
	return &ReadApiAPIService{}
}

// GetAccountDetails - Get account details
func (s *ReadApiAPIService) GetAccountDetails(ctx context.Context, address string) (ImplResponse, error) {

	log.Info(relay.InfoTitleAccountDetails, relay.MsgDial, relay.DIAL_READ_URL)

	client, err := rpc.Dial(relay.DIAL_READ_URL)
	if err != nil {
		log.Error(relay.MsgDial,  strconv.Itoa(http.StatusInternalServerError), errors.New(err.Error()))
		return Response(http.StatusInternalServerError, nil), errors.New(err.Error())
	}
	defer client.Close()

	if !common.IsHexAddress(address) {
		log.Error(relay.MsgAddress,  strconv.Itoa(http.StatusBadRequest), relay.ErrInvalidAddress,)
		return Response(http.StatusBadRequest, nil), relay.ErrInvalidAddress
	}

	var balance *hexutil.Big
	err = client.CallContext(ctx, &balance, "eth_getBalance", common.HexToAddress(address), "latest")
	if err != nil {
		log.Error(relay.MsgBalance,  strconv.Itoa(http.StatusMethodNotAllowed), errors.New(err.Error()))
		return Response(http.StatusMethodNotAllowed, nil), errors.New(err.Error())
	}

	var nonce *hexutil.Big
	err = client.CallContext(ctx, &nonce, "eth_getTransactionCount", common.HexToAddress(address), "latest")
	if err != nil {
		log.Error(relay.MsgNonce,   strconv.Itoa(http.StatusMethodNotAllowed), errors.New(err.Error()))
		return Response(http.StatusMethodNotAllowed, nil), errors.New(err.Error())
	}

	var blockNumber *hexutil.Uint64
	err = client.CallContext(ctx, &blockNumber, "eth_blockNumber")
	if err != nil {
		log.Error(relay.MsgBlockNumber,   strconv.Itoa(http.StatusMethodNotAllowed), errors.New(err.Error()))
		return Response(http.StatusMethodNotAllowed, nil), errors.New(err.Error())
	}

	accountBalance, err := hexutil.DecodeBig(balance.String())
	if err != nil {
		log.Error(relay.MsgBalance,  strconv.Itoa(http.StatusUnprocessableEntity),  errors.New(err.Error()))
		return Response(http.StatusUnprocessableEntity, nil), errors.New(err.Error())
	}

	accountNonce, err := hexutil.DecodeBig(nonce.String())
	if err != nil {
		log.Error(relay.MsgNonce,   strconv.Itoa(http.StatusUnprocessableEntity), errors.New(err.Error()))
		return Response(http.StatusUnprocessableEntity, nil), errors.New(err.Error())
	}

	latestBlockNumber, err := hexutil.DecodeBig(blockNumber.String())
	if err != nil {
		log.Error(relay.MsgBlockNumber, strconv.Itoa(http.StatusUnprocessableEntity), errors.New(err.Error()))
		return Response(http.StatusUnprocessableEntity, nil), errors.New(err.Error())
	}

	b := accountBalance.String()
	n := accountNonce.Int64()
	l := latestBlockNumber.Int64()

	log.Info(relay.InfoTitleAccountDetails,  address, http.StatusOK)

	return Response(http.StatusOK, AccountDetailsResponse{
		AccountDetails{&b,&n,&l}}), nil
}

// GetTransaction - Get transaction
func (s *ReadApiAPIService) GetTransaction(ctx context.Context, hash string) (ImplResponse, error) {

	log.Info(relay.InfoTitleTransaction, relay.MsgDial, relay.DIAL_READ_URL)

	client, err := rpc.Dial(relay.DIAL_READ_URL)
	if err != nil {
		log.Error(relay.MsgDial, strconv.Itoa(http.StatusInternalServerError), errors.New(err.Error()))
		return Response(http.StatusInternalServerError, nil), errors.New(err.Error())
	}
	defer client.Close()

	if !common.IsHexAddress(hash)  {
		log.Error(relay.MsgHash, strconv.Itoa(http.StatusBadRequest), relay.ErrInvalidHash)
		return  Response(http.StatusBadRequest, nil), relay.ErrInvalidHash
	}

	var raw json.RawMessage
	err =  client.CallContext(ctx, &raw, "eth_getTransactionByHash", common.HexToHash(hash))
	if err != nil {
		log.Error(relay.MsgTransaction, strconv.Itoa(http.StatusMethodNotAllowed), errors.New(err.Error()))
		return  Response(http.StatusMethodNotAllowed, nil), errors.New(err.Error())
	}

	if raw != nil {

		var rpcTxn  *RPCTransaction

		err = json.Unmarshal(raw, &rpcTxn);
		if err != nil {
			log.Error(relay.MsgNonce, strconv.Itoa(http.StatusUnprocessableEntity), errors.New(err.Error()))
			return Response(http.StatusUnprocessableEntity, nil), errors.New(err.Error())
		}

		var blochHash string
		var blockNumber int64
		var from, gas, gasPrice, txnHash, input, to string

		if rpcTxn.BlockHash != nil{
			blochHash = rpcTxn.BlockHash.String()
		}
		if rpcTxn.BlockNumber != nil {
			b := rpcTxn.BlockNumber.ToInt()
			blockNumber = b.Int64()
		}

		from = rpcTxn.From.String()
		gas = rpcTxn.Gas.String()
		gasPrice = rpcTxn.GasPrice.String()
		txnHash = rpcTxn.Hash.String()
		input = rpcTxn.Input.String()

		if rpcTxn.To != nil {
			to = rpcTxn.To.String()
		}

		transNonce := rpcTxn.Nonce
		n, err := hexutil.DecodeBig(transNonce.String())
		if err != nil {
			log.Error(relay.MsgNonce, strconv.Itoa(http.StatusUnprocessableEntity), errors.New(err.Error()))
			return  Response(http.StatusUnprocessableEntity, nil), errors.New(err.Error())
		}

		nonce := n.Int64()

		value := rpcTxn.Value.String()

		var receipt map[string]interface{}
		err =  client.CallContext(ctx, &receipt, "eth_getTransactionReceipt", common.HexToHash(hash))
		if err != nil {
			log.Error(relay.MsgTransactionReceipt, strconv.Itoa(http.StatusMethodNotAllowed), errors.New(err.Error()))
			return  Response(http.StatusMethodNotAllowed, nil), errors.New(err.Error())
		}

		var transactionReceipt  TransactionReceipt
		if receipt != nil {
			cumulativeGasUsed := receipt["cumulativeGasUsed"].(string)
			effectiveGasPrice := receipt["effectiveGasPrice"].(string)
			gasUsed := receipt["gasUsed"].(string)
			status := receipt["status"].(string)
			txnReceiptHash := receipt["transactionHash"].(string)
			t := receipt["type"].(string)
			transactionReceipt =  TransactionReceipt{
				cumulativeGasUsed, effectiveGasPrice, gasUsed,
				status, txnReceiptHash, t}
		} else {
			log.Info(relay.InfoTitleTransaction, hash, http.StatusPartialContent)
			return  Response(http.StatusPartialContent, TransactionResponse{TransactionDetails{
				&blochHash, &blockNumber, from,gas, gasPrice, txnHash,
				input, nonce , &to,value,
				transactionReceipt}}),	nil
		}

		log.Info(relay.InfoTitleTransaction, hash, http.StatusOK)
		return Response(http.StatusOK,TransactionResponse{TransactionDetails{
			&blochHash, &blockNumber, from,gas, gasPrice, txnHash,
			input, nonce , &to,value,
			transactionReceipt}}),	nil
	}

	log.Info(relay.InfoTitleTransaction, hash, http.StatusNoContent)
	return  Response(http.StatusNoContent,nil), nil
}
