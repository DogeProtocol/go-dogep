// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * QC Read API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 */

package qcreadapi

import (
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ReadApiAPIController binds http requests to an api service and writes the service results to the http response
type ReadApiAPIController struct {
	service ReadApiAPIServicer
	errorHandler ErrorHandler
}

// ReadApiAPIOption for how the controller is set up.
type ReadApiAPIOption func(*ReadApiAPIController)

// WithReadApiAPIErrorHandler inject ErrorHandler into controller
func WithReadApiAPIErrorHandler(h ErrorHandler) ReadApiAPIOption {
	return func(c *ReadApiAPIController) {
		c.errorHandler = h
	}
}

// NewReadApiAPIController creates a default api controller
func NewReadApiAPIController(s ReadApiAPIServicer, opts ...ReadApiAPIOption) *ReadApiAPIController {
	controller := &ReadApiAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ReadApiAPIController
func (c *ReadApiAPIController) Routes() Routes {
	return Routes{
		"GetAccountDetails": Route{
			strings.ToUpper("Get"),
			"/accounts/{address}",
			c.GetAccountDetails,
		},
		"GetTransaction": Route{
			strings.ToUpper("Get"),
			"/transaction/{hash}",
			c.GetTransaction,
		},
	}
}

// GetAccountDetails - Get account details
func (c *ReadApiAPIController) GetAccountDetails(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	addressParam := params["address"]
	if addressParam == "" {
		c.errorHandler(w, r, &RequiredError{"address"}, nil)
		return
	}
	result, err := c.service.GetAccountDetails(r.Context(), addressParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetTransaction - Get Transaction
func (c *ReadApiAPIController) GetTransaction(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	hashParam := params["hash"]
	if hashParam == "" {
		c.errorHandler(w, r, &RequiredError{"hash"}, nil)
		return
	}
	result, err := c.service.GetTransaction(r.Context(), hashParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
