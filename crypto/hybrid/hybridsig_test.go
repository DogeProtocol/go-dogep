package hybrid

import (
	"encoding/base64"
	"fmt"
	"github.com/DogeProtocol/dp/crypto/signaturealgorithm"
	"testing"
)

func TestHybridSig_Basic(t *testing.T) {

	var sig signaturealgorithm.SignatureAlgorithm
	sig = CreateHybridSig()

	signaturealgorithm.SignatureAlgorithmTest(t, sig)
}

func TestBase64(t *testing.T) {
	var sig signaturealgorithm.SignatureAlgorithm
	sig = CreateHybridSig()

	serverSigningPublicKey := "+T2p1FPqhulBBu/r6kAicodQpN0tBUU6uz8D/ZHhaRsJGCj0uFZnvKloVIkWAIdkCqyrKmMyG27QVX+A1WKs+EkKp5Eb4n+VgNG2W0ILcO2s6FmlpRqSXI2pMHi7gm5jP3xoJhvY9kGStVAtW/OeWPFqVpYmaiK6YJbadl6+BvHl1AIZdQEYNVtQt0mJWIEtp0rWBKfgala0eQJCEonBIKkiGL6EyWZtPkh8I9WrHroEs0+Ope2SGR4PWELxflPaSEUPBOXbUqacIe48wk0ZcRJQTZGbCKue4t0rSuzfGCgQy5wW+JzEK1dZg2pRtVAy+UjhqVoq6+sckyiKvEM5zeokhu6A7FA9WhE29qlI85xupcHVyb67uFRX9ONBRoUzQYNtgGpllLao2iRDrD1Ifl+IqVKGROWUO2BiojatWxpgPHAVLwakkji0K6dJDHg5Y2MMw8USHARHjSFAabLwhxIc/Q1ONZo7FCuBoMPwWUmqaS4W+riOxBkVBBcZXn4K1vODzKm+uSxN6z6FNVDi2DOACeaR5g5C2h2tZChMdONbM69FPulVjDKOQE/0Y2R+YISMyeqaKCoJwaMOnW+SNIuXdyF7FDZESVAiKI8pildDzKWBSJy3M8tCT45N6uZBoRSlFibohH0yCXhp7Qftbq5eGLpeZyJaKfTZX304irxpqErDVGyvBfMKGWW58fplwkkM8W1p1B4+WCpxMIgXrlLl6fkdCpg/7VJhtIY0TKGXJFKKB524Mqd0mtwjZnXm0goVcM33JNMejnIJeImPwEJ2sldSgSIWoD0cy+Gfu6HFXKr9w9iNJqFwotb7n3lo0yekF24odQsow8m2Lu5o2FiQJGrsVHuMhx7KNqltYKeIisv4Eq+lNu3tQWvF2QOFRlTEBmuOHUzXZ52+YQbIYZ1ZKJShyHsZnWAC/r5nrCPsJsoMa9Pbc7qNaCizQYSH5HCmABnCaXkeOrRsfiRQttjgkqk8SS95mCkvPDLEBpFRImiicKnYJI4rWaarkQzxiDWpNnVIbbP6+5CSAe+ZPZB10M6zIHad+YiaNb+F9DENxlKM5C+0YF8UZwbGM+yOUgKGt6gthFp0FJZm8GKBO6kwRQuHfiV54CbLbe0WHaJDSu7Omi5JREQbHo3EaoFTbnw24QYVr2xKbopbs2wbJV1RrqPJbewgpNVi8kvzLWY0A7RbK4Pqs3ZsJMWeEt7p/onGO5laU3PA6XSdU6C5i00="
	signature := "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"
	serverPubKeyDataRemote := "kCxRRXOi8odLeyZUZurQCkDKAwxCsDOiCRsdXbkPMXAJlJkZdQJQWgYmPxk/Ia2yebDDqUJcc6IwSuOb90kyrTQ6IEIB/cWrHOq7LeLIdZpj/RzYxwEjmr13xT02O5CwmOKiGH7SLLG2RYEjBzULmbQBBUkGF9XmiQAslTDED8JZ5qu9kvIA6hHwEH7zI7lcHGqNd8uB4NxL7H8oFo5BV3knoUkC6J6uciZDz+MZhrh4nRWcTCiJej7d7kfNzAU/oc+mNQrCy41PC5XKWBBUI3RQu2veBwQB1daTb9glFRhOWQoqeBoW2tR34N9UiV7LjaSOCsox1y4B/lYlLcIIRLiLVWUI0oReuewAlC0RvWmSF0FXwNhpzDGE8BrzDQnf8lTemnudFxk9zV8MSiKQM5TqYBjFeb/rAQwCGWkBYnhlxr/LoI/RfZg/9LoKrUyGdMikUsERdvAYzismc2JZsBWBWj0o7Gc0BkBYUeo7Fx7jqEKZUyxbswfW55TgLU0NafnAkeK8JQTHQmjKQb/szznygMFMrL3rdqMmsf5jUhJomqk6+0WH1rq7OUdXNhBHKzDb+3RNUZ0A8yJXH+spUOWhP0CyqGiYYGffnqkSakHnB+C/pb4khAK/HrQqS+qTIQ4AqpVdzQWvwdhnbezQtNqEoZAtE10WQhCXC6ujCjzh0xyIt44uq91Cd2k9iAFzAEsdJlH7QeGHlmAqE+uFGUsoMyMy3VePDQz0bcPHVFwHhELbO20Sl6Wb4+ihUM2VuZR/prXh6brv3jhKnEUiqYZL5c7YIJlgbArrtQ5i3bt0LFVAlAGbFW3kI009OwpeSaNVqjJ8SFY+1mOFAYTksUGdTsD1Jm0EMHTawUkmELBFHc4IBUP/gowNOFUYiwfwY5vKmu4UCj5I/OocED0SwBykI4aBeEg1rnGbErYZbcx/ZepXJXJDgbDWjsgMH8owueDKtt6rq6K+ClzsOm+OOjDe1w8GsfLplNDKaA02qvzpanNenEneAW8VbTiiUq5xaDTV2WPprQVJuMLmV0AipV5QdthdTPqctU8PEzLlprk147cLBm6mZ2dmCUrGJxjTX6egWOVo4BCpgEGZGpvhfhUsybdSqBLo1kjp33RlqrJ6Rcv1PYLnyvLP1IkOU4X/yAMfvktXfcQ4rCTRJeNIGRfpYYRgqKmFJNXSMkexpKiPitsZoQ6WsWBLkwOhqbI0KhQchMAyZBtDLoI6enaI0r4="

	serverSigningPublicKeyBytes, err := base64.StdEncoding.DecodeString(serverSigningPublicKey)
	if err != nil {
		t.Fatalf("failed")
	}
	signatureBytes, err := base64.StdEncoding.DecodeString(signature)
	if err != nil {
		t.Fatalf("failed")
	}
	fmt.Println("signatureBytes", len(signatureBytes))
	serverPubKeyDataRemoteBytes, err := base64.StdEncoding.DecodeString(serverPubKeyDataRemote)
	if err != nil {
		t.Fatalf("failed")
	}

	pubKeyExpected, err := sig.DecodePublicKey(serverSigningPublicKeyBytes)
	if err != nil {
		t.Fatalf("failed")
	}
	addressExpected, err := sig.PublicKeyToAddress(pubKeyExpected)
	if err != nil {
		t.Fatalf("failed")
	}

	pubKeyActual, err := sig.DecodePublicKey(serverPubKeyDataRemoteBytes)
	if err != nil {
		t.Fatalf("failed")
	}
	addressActual, err := sig.PublicKeyToAddress(pubKeyActual)
	if err != nil {
		t.Fatalf("failed")
	}

	fmt.Println("addressExpected", addressExpected, "addressActual", addressActual)
}
