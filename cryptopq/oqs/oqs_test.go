//This file was added for go-dogep project (Doge Protocol Platform)

package oqs

import (
	"bytes"
	"crypto/rand"
	"fmt"
	"io"
	"testing"
)

const TestCount = 8192

func generateKeyPair() (pubkey, privkey []byte) {

	key, err := GenerateKey()

	if err != nil {
		panic(err)
	}
	pubkey = make([]byte, PublicKeyLen)
	pub := key.N.Bytes()
	copy(pubkey[PublicKeyLen-len(pub):], pub)

	privkey = make([]byte, PrivateKeyLen)
	priv := key.D.Bytes()
	copy(privkey[PrivateKeyLen-len(priv):], priv)

	return pubkey, privkey
}

func csprngEntropy(n int) []byte {
	buf := make([]byte, n)
	if _, err := io.ReadFull(rand.Reader, buf); err != nil {
		panic("reading from crypto/rand failed: " + err.Error())
	}
	return buf
}

func randSig() []byte {
	sig := csprngEntropy(SignatureLen - 41)
	sig[32] &= 0x70
	sig[64] %= 4
	return sig
}

func TestSignatureValidityByP2P(t *testing.T) {
	prvkey := []byte{89, 32, 32, 6, 27, 222, 187, 252, 31, 186, 0, 47, 249, 3, 241, 58, 12, 0, 2, 15, 193, 193, 32, 48, 125, 252, 47, 132, 223, 255, 255, 4, 16, 133, 248, 160, 197, 4, 47, 195, 4, 129, 186, 0, 78, 194, 24, 17, 68, 235, 239, 68, 0, 32, 192, 0, 17, 0, 8, 0, 3, 24, 15, 128, 27, 237, 188, 0, 48, 191, 8, 32, 61, 248, 145, 71, 24, 79, 252, 19, 207, 66, 252, 33, 57, 15, 224, 194, 28, 31, 252, 11, 208, 69, 3, 222, 193, 244, 81, 255, 248, 47, 251, 216, 1, 136, 232, 17, 62, 11, 209, 254, 255, 207, 191, 19, 223, 131, 16, 146, 65, 235, 193, 125, 244, 79, 253, 11, 255, 195, 11, 209, 56, 255, 175, 251, 248, 95, 129, 243, 192, 124, 7, 238, 195, 239, 208, 193, 15, 240, 251, 4, 31, 131, 12, 64, 193, 15, 208, 65, 12, 49, 255, 248, 1, 58, 255, 190, 62, 252, 16, 194, 7, 207, 58, 35, 175, 252, 251, 111, 196, 248, 0, 188, 24, 0, 0, 7, 239, 132, 19, 223, 195, 7, 160, 193, 7, 241, 67, 4, 111, 249, 220, 79, 124, 240, 96, 3, 24, 33, 7, 48, 32, 59, 8, 49, 189, 4, 33, 187, 8, 17, 1, 255, 240, 66, 19, 224, 1, 8, 16, 54, 248, 30, 188, 252, 143, 65, 8, 81, 73, 251, 81, 187, 248, 127, 0, 252, 64, 62, 3, 191, 192, 243, 161, 67, 240, 65, 74, 7, 208, 60, 19, 159, 64, 7, 160, 63, 247, 222, 127, 255, 253, 252, 15, 176, 64, 255, 192, 5, 251, 255, 124, 28, 31, 66, 11, 175, 129, 12, 15, 69, 220, 47, 193, 16, 31, 128, 247, 114, 69, 8, 32, 64, 252, 32, 66, 220, 16, 185, 243, 225, 131, 251, 225, 2, 243, 239, 58, 243, 223, 253, 248, 1, 254, 3, 255, 62, 7, 240, 132, 19, 241, 63, 244, 80, 3, 240, 14, 190, 0, 1, 187, 255, 191, 195, 8, 160, 69, 15, 176, 127, 251, 160, 3, 252, 32, 1, 8, 97, 194, 0, 18, 9, 27, 240, 249, 3, 159, 121, 12, 63, 134, 28, 15, 68, 16, 62, 254, 244, 63, 191, 0, 33, 126, 4, 49, 62, 255, 160, 191, 8, 78, 122, 243, 175, 131, 23, 241, 132, 15, 242, 6, 3, 255, 192, 16, 47, 132, 4, 15, 127, 248, 110, 191, 11, 255, 65, 3, 223, 67, 239, 225, 115, 3, 208, 61, 19, 223, 190, 216, 0, 126, 252, 47, 186, 236, 34, 2, 248, 48, 189, 3, 240, 255, 11, 160, 55, 31, 255, 126, 7, 239, 126, 7, 176, 127, 251, 242, 9, 7, 241, 125, 24, 144, 62, 244, 30, 254, 4, 0, 126, 3, 225, 191, 23, 207, 255, 4, 16, 129, 0, 49, 131, 0, 129, 58, 255, 255, 66, 248, 111, 255, 243, 64, 66, 244, 0, 254, 3, 240, 189, 8, 33, 69, 11, 176, 127, 255, 223, 252, 31, 237, 132, 251, 127, 255, 15, 192, 196, 23, 191, 127, 3, 225, 129, 31, 207, 73, 3, 175, 190, 240, 114, 4, 23, 240, 61, 248, 0, 127, 4, 63, 64, 8, 81, 255, 16, 95, 132, 244, 17, 8, 16, 109, 129, 244, 48, 253, 223, 192, 194, 16, 191, 67, 255, 193, 65, 4, 32, 128, 15, 254, 65, 19, 193, 63, 12, 33, 123, 12, 175, 130, 236, 15, 139, 19, 192, 70, 248, 111, 68, 252, 1, 71, 3, 144, 59, 248, 0, 63, 12, 32, 192, 216, 0, 136, 19, 224, 200, 7, 225, 65, 7, 128, 128, 31, 240, 1, 239, 222, 131, 251, 206, 252, 12, 16, 248, 16, 0, 254, 12, 2, 59, 255, 206, 3, 252, 17, 63, 0, 95, 67, 255, 80, 125, 240, 31, 252, 4, 78, 132, 20, 94, 195, 3, 254, 253, 228, 81, 61, 231, 224, 5, 240, 17, 195, 247, 110, 117, 0, 32, 194, 255, 208, 5, 243, 239, 64, 32, 65, 0, 247, 112, 126, 0, 80, 67, 24, 0, 193, 32, 0, 0, 247, 178, 68, 48, 144, 65, 248, 32, 127, 252, 31, 133, 19, 255, 251, 3, 191, 65, 239, 255, 1, 7, 255, 128, 244, 15, 132, 23, 177, 185, 28, 16, 132, 252, 17, 126, 255, 240, 194, 19, 175, 192, 244, 31, 253, 243, 208, 190, 255, 192, 198, 0, 63, 133, 4, 15, 69, 223, 224, 190, 11, 223, 3, 7, 112, 252, 12, 0, 192, 12, 49, 2, 252, 128, 2, 84, 255, 0, 9, 40, 233, 13, 5, 255, 16, 10, 4, 35, 42, 2, 247, 239, 249, 40, 28, 233, 179, 17, 36, 224, 14, 40, 23, 0, 242, 243, 219, 23, 10, 26, 227, 18, 225, 235, 224, 8, 41, 249, 248, 0, 2, 246, 7, 16, 6, 8, 233, 25, 22, 255, 204, 224, 225, 4, 235, 9, 239, 16, 245, 22, 6, 50, 6, 41, 226, 18, 216, 45, 240, 226, 43, 23, 8, 237, 11, 248, 31, 10, 3, 250, 24, 243, 235, 248, 255, 2, 246, 16, 199, 241, 24, 224, 228, 26, 246, 1, 15, 13, 18, 235, 232, 20, 33, 27, 33, 236, 12, 252, 240, 28, 254, 247, 7, 14, 241, 17, 254, 3, 251, 57, 1, 16, 227, 3, 233, 38, 28, 222, 221, 16, 238, 4, 0, 234, 220, 10, 251, 246, 3, 245, 239, 220, 238, 11, 243, 19, 4, 243, 14, 28, 228, 249, 8, 4, 242, 12, 0, 242, 255, 232, 1, 10, 37, 217, 5, 37, 243, 17, 51, 245, 3, 44, 245, 236, 16, 25, 200, 25, 224, 19, 0, 243, 22, 19, 9, 9, 214, 41, 24, 254, 17, 39, 7, 18, 32, 22, 9, 74, 35, 48, 252, 239, 236, 10, 3, 25, 3, 44, 231, 27, 231, 245, 8, 224, 45, 228, 255, 219, 255, 45, 234, 254, 240, 237, 11, 253, 38, 26, 53, 2, 0, 247, 15, 20, 168, 214, 38, 241, 254, 7, 4, 23, 26, 8, 231, 25, 2, 244, 231, 7, 222, 9, 254, 251, 8, 29, 10, 225, 2, 13, 0, 253, 244, 249, 233, 24, 250, 18, 240, 187, 251, 223, 5, 0, 26, 255, 12, 197, 9, 237, 5, 41, 19, 31, 30, 13, 226, 207, 228, 11, 2, 29, 22, 20, 235, 4, 237, 0, 239, 252, 2, 240, 2, 9, 0, 8, 252, 248, 16, 19, 12, 232, 219, 6, 211, 240, 54, 18, 219, 30, 254, 231, 245, 1, 227, 4, 227, 252, 5, 255, 29, 222, 3, 231, 239, 193, 249, 220, 226, 254, 247, 244, 25, 44, 49, 229, 32, 240, 247, 24, 9, 11, 17, 51, 238, 250, 211, 15, 19, 8, 45, 2, 6, 9, 0, 248, 20, 228, 17, 23, 0, 248, 2, 31, 14, 11, 241, 49, 245, 20, 32, 240, 16, 19, 252, 214, 250, 241, 250, 245, 230, 240, 6, 242, 243, 245, 244, 240, 7, 242, 18, 233, 31, 35, 5, 23, 0, 31, 25, 34, 5, 1, 223, 190, 229, 33, 30, 6, 36, 253, 10, 248, 32, 242, 62, 3, 233, 52, 5, 246, 236, 255, 233, 35, 12, 159, 234, 246, 249, 250, 250, 46, 242, 4, 10, 242, 37, 228, 18, 220, 4, 209, 228, 206, 33, 227, 238, 10, 10, 234, 247, 207, 228, 57, 24, 1, 22, 11, 244, 6, 21, 21, 230, 254, 249, 11, 40, 255, 23, 47, 21, 254, 249, 12, 15, 242, 3, 239, 5, 234, 252, 203, 11, 251, 222, 19, 247, 9, 246, 31, 240, 1, 242, 168, 10, 249, 241}
	pubkey := []byte{9, 127, 12, 241, 182, 86, 237, 42, 0, 52, 111, 102, 26, 193, 52, 17, 37, 94, 49, 171, 103, 107, 57, 68, 161, 151, 176, 197, 47, 100, 46, 223, 130, 0, 21, 19, 50, 174, 177, 41, 106, 96, 8, 88, 60, 134, 58, 11, 236, 100, 60, 208, 170, 4, 84, 212, 248, 33, 76, 163, 131, 204, 210, 246, 113, 165, 62, 133, 81, 105, 145, 60, 5, 96, 69, 23, 14, 132, 4, 170, 213, 139, 201, 201, 7, 92, 74, 159, 187, 15, 93, 63, 44, 89, 26, 43, 253, 130, 8, 9, 112, 108, 58, 63, 132, 87, 118, 4, 216, 83, 216, 139, 229, 18, 142, 85, 165, 72, 97, 247, 184, 108, 152, 6, 190, 156, 134, 98, 60, 70, 184, 104, 225, 211, 181, 186, 39, 104, 164, 133, 229, 109, 12, 10, 50, 102, 87, 42, 99, 141, 146, 129, 23, 106, 171, 126, 152, 19, 96, 213, 229, 78, 152, 78, 1, 146, 215, 110, 68, 68, 142, 163, 171, 106, 196, 210, 40, 84, 142, 132, 184, 77, 101, 106, 133, 131, 197, 53, 217, 141, 44, 29, 207, 241, 245, 99, 134, 177, 10, 65, 71, 62, 19, 115, 24, 102, 41, 41, 40, 199, 3, 30, 60, 158, 248, 233, 151, 5, 150, 157, 159, 202, 208, 207, 98, 159, 60, 44, 200, 150, 221, 226, 177, 156, 116, 115, 234, 1, 47, 170, 45, 16, 229, 197, 208, 121, 121, 68, 221, 105, 100, 107, 153, 188, 180, 162, 233, 37, 136, 204, 189, 165, 133, 59, 49, 239, 219, 66, 102, 242, 144, 63, 17, 120, 118, 44, 40, 146, 39, 31, 53, 145, 18, 139, 57, 88, 225, 34, 182, 100, 125, 70, 231, 172, 166, 52, 122, 138, 167, 162, 26, 239, 109, 196, 242, 37, 229, 229, 49, 34, 88, 202, 235, 167, 106, 5, 65, 204, 68, 160, 245, 198, 218, 79, 21, 21, 117, 189, 28, 145, 100, 205, 102, 26, 231, 5, 10, 18, 157, 117, 116, 128, 160, 93, 177, 110, 147, 153, 218, 9, 103, 11, 182, 50, 99, 21, 159, 218, 186, 33, 209, 121, 130, 43, 58, 15, 106, 234, 119, 99, 34, 221, 54, 113, 177, 89, 207, 36, 179, 175, 98, 254, 87, 246, 21, 91, 170, 217, 190, 181, 141, 146, 244, 191, 185, 158, 199, 143, 159, 206, 57, 218, 227, 129, 68, 23, 178, 42, 204, 127, 54, 154, 41, 0, 49, 228, 165, 139, 241, 134, 206, 72, 234, 189, 181, 41, 238, 46, 45, 222, 230, 4, 78, 31, 26, 60, 13, 106, 162, 218, 25, 222, 17, 153, 84, 165, 233, 72, 222, 6, 18, 34, 16, 18, 87, 23, 141, 150, 248, 164, 18, 157, 168, 163, 41, 143, 32, 99, 106, 38, 191, 88, 253, 0, 66, 39, 146, 21, 156, 7, 103, 64, 173, 234, 56, 181, 107, 6, 129, 9, 188, 87, 28, 111, 52, 3, 67, 152, 131, 229, 47, 199, 229, 64, 17, 44, 177, 39, 251, 195, 80, 17, 52, 148, 166, 120, 9, 231, 140, 113, 4, 108, 8, 65, 152, 189, 89, 74, 220, 49, 201, 220, 142, 140, 182, 10, 25, 90, 70, 39, 101, 1, 68, 242, 223, 132, 119, 187, 144, 41, 23, 99, 30, 107, 150, 34, 154, 41, 49, 226, 66, 10, 190, 192, 147, 37, 68, 166, 174, 100, 140, 138, 164, 90, 164, 24, 32, 48, 19, 150, 228, 46, 25, 78, 121, 164, 69, 26, 251, 81, 134, 71, 5, 143, 40, 68, 174, 157, 171, 213, 104, 64, 177, 40, 189, 124, 35, 89, 69, 219, 22, 25, 11, 3, 220, 138, 86, 36, 121, 106, 135, 3, 106, 200, 140, 142, 154, 53, 222, 33, 185, 150, 226, 15, 53, 225, 137, 142, 146, 156, 24, 80, 183, 99, 103, 5, 12, 17, 91, 127, 90, 229, 166, 92, 193, 250, 255, 239, 94, 128, 172, 103, 8, 165, 0, 185, 2, 117, 183, 100, 41, 37, 191, 24, 105, 139, 107, 1, 160, 65, 33, 78, 245, 225, 230, 78, 53, 106, 197, 29, 80, 26, 20, 86, 160, 137, 105, 144, 153, 111, 131, 106, 104, 227, 51, 215, 134, 30, 75, 132, 225, 219, 64, 139, 200, 8, 28, 175, 208, 6, 194, 76, 158, 86, 25, 144, 149, 215, 185, 44, 178, 175, 202, 49, 174, 130, 120, 17, 46, 133, 0, 174, 169, 145, 116, 52, 146, 55, 75, 29, 111, 154, 85, 132, 135, 169, 70, 106, 186, 158, 89, 182, 79, 59, 155, 160, 251, 97, 124, 78, 211, 184, 92, 48, 167, 187, 33, 150, 149, 97, 22, 137, 197, 22, 105, 105, 161, 1, 195, 248, 92, 136, 114, 204, 21, 246, 226, 198, 2, 112, 253, 35, 216, 183, 155, 85, 23, 70, 234, 249, 132, 216, 194, 43, 9, 128, 74, 77, 69, 36, 17, 174, 239, 66, 224, 39, 13, 183, 85, 198, 119, 18, 109, 67, 111, 96, 196, 169, 186, 149, 45, 44, 113, 139, 2, 114, 72, 250, 128, 234, 247, 232, 62, 201, 162, 151, 2, 98, 27, 35, 111, 101, 47, 14, 216, 199, 227, 220, 85, 169, 77, 196, 231, 161, 8, 139, 147, 14, 191, 164, 113, 81, 209, 25, 77, 54, 114, 111, 12, 66, 106, 180, 250, 7, 254, 82, 79}
	sig := []byte{15, 6, 0, 0, 0, 0, 0, 0, 57, 47, 248, 77, 117, 189, 126, 133, 255, 203, 88, 239, 131, 30, 190, 234, 117, 46, 5, 108, 136, 76, 231, 66, 171, 37, 37, 113, 120, 52, 198, 53, 140, 206, 209, 186, 15, 18, 146, 95, 14, 25, 86, 164, 37, 119, 125, 99, 57, 51, 189, 171, 55, 232, 225, 91, 47, 139, 105, 107, 189, 85, 209, 72, 124, 18, 135, 162, 157, 234, 168, 145, 21, 181, 130, 158, 33, 184, 139, 199, 236, 164, 224, 243, 44, 161, 61, 82, 84, 239, 108, 119, 229, 173, 58, 77, 228, 161, 237, 164, 196, 158, 163, 112, 252, 163, 187, 21, 86, 65, 115, 160, 124, 85, 244, 15, 153, 241, 213, 182, 140, 223, 70, 197, 253, 138, 192, 171, 52, 180, 93, 198, 192, 29, 164, 82, 175, 4, 51, 181, 120, 29, 2, 88, 71, 208, 246, 222, 5, 143, 143, 118, 29, 195, 187, 7, 228, 237, 237, 182, 200, 38, 62, 86, 107, 140, 30, 67, 57, 67, 124, 96, 29, 191, 181, 88, 198, 170, 60, 54, 49, 120, 251, 81, 250, 191, 57, 94, 21, 197, 86, 159, 248, 189, 158, 189, 17, 16, 205, 220, 86, 129, 11, 23, 173, 101, 218, 94, 209, 202, 18, 138, 235, 190, 237, 94, 169, 226, 186, 225, 117, 30, 135, 195, 77, 110, 96, 146, 221, 189, 13, 14, 103, 95, 114, 215, 207, 96, 82, 182, 149, 116, 244, 178, 197, 138, 137, 83, 181, 120, 173, 107, 198, 125, 250, 94, 115, 109, 129, 191, 138, 80, 218, 178, 142, 160, 50, 136, 223, 77, 217, 160, 65, 4, 21, 26, 222, 21, 173, 107, 68, 130, 153, 58, 67, 209, 226, 197, 17, 56, 225, 77, 216, 162, 91, 198, 152, 248, 73, 34, 93, 189, 177, 155, 103, 181, 243, 134, 107, 174, 147, 169, 216, 90, 226, 121, 70, 235, 229, 251, 220, 167, 216, 180, 215, 51, 204, 195, 113, 206, 196, 53, 48, 118, 89, 66, 144, 181, 45, 122, 127, 57, 97, 33, 139, 87, 19, 136, 33, 16, 131, 109, 31, 221, 180, 233, 130, 90, 171, 95, 63, 213, 232, 3, 117, 134, 95, 251, 208, 246, 13, 30, 97, 139, 212, 150, 141, 139, 122, 241, 242, 159, 74, 45, 25, 218, 32, 147, 170, 228, 246, 22, 189, 41, 166, 189, 15, 97, 147, 153, 183, 255, 251, 113, 86, 201, 219, 145, 244, 120, 196, 157, 246, 146, 231, 200, 70, 236, 84, 93, 43, 53, 154, 121, 5, 30, 86, 161, 175, 54, 251, 216, 181, 107, 140, 152, 155, 198, 19, 45, 250, 113, 170, 155, 12, 227, 155, 131, 134, 57, 164, 170, 74, 198, 215, 83, 84, 199, 185, 137, 195, 39, 232, 151, 250, 59, 133, 152, 48, 126, 72, 75, 24, 186, 192, 71, 87, 27, 115, 117, 48, 139, 158, 130, 61, 183, 242, 33, 215, 76, 93, 202, 127, 115, 218, 49, 48, 26, 171, 178, 214, 211, 240, 218, 168, 119, 106, 50, 33, 155, 84, 43, 3, 148, 54, 193, 190, 127, 152, 18, 234, 136, 232, 191, 115, 115, 43, 166, 34, 105, 68, 53, 217, 138, 42, 170, 45, 30, 5, 130, 144, 229, 167, 181, 150, 219, 126, 134, 105, 217, 41, 115, 19, 102, 172, 175, 51, 190, 123, 184, 32, 90, 18, 117, 203, 82, 177, 17, 130, 164, 186, 61, 92, 13, 179, 72, 178, 72, 39, 28, 42, 246, 193, 30, 198, 119, 107, 4, 117, 125, 170, 27, 152, 43, 5, 155, 191, 48, 177, 32, 226, 247, 121, 36, 125, 16, 138, 66, 99, 126, 148, 102, 16, 149, 43, 219, 196, 93, 41, 93, 158, 177, 88, 204, 99, 89, 184, 133, 177, 109, 157, 222, 159, 205, 191, 149, 191, 170, 21, 76, 250, 122, 105, 217, 199, 126, 151, 59, 174, 189, 113, 136, 155, 69, 9, 127, 12, 241, 182, 86, 237, 42, 0, 52, 111, 102, 26, 193, 52, 17, 37, 94, 49, 171, 103, 107, 57, 68, 161, 151, 176, 197, 47, 100, 46, 223, 130, 0, 21, 19, 50, 174, 177, 41, 106, 96, 15, 6, 0, 0, 0, 0, 0, 0, 60, 208, 170, 4, 84, 212, 248, 33, 76, 163, 131, 204, 210, 246, 113, 165, 62, 133, 81, 105, 145, 60, 5, 96, 69, 23, 14, 132, 4, 170, 213, 139, 201, 201, 7, 92, 74, 159, 187, 15, 93, 63, 44, 89, 26, 43, 253, 130, 8, 9, 112, 108, 58, 63, 132, 87, 118, 4, 216, 83, 216, 139, 229, 18, 142, 85, 165, 72, 97, 247, 184, 108, 152, 6, 190, 156, 134, 98, 60, 70, 184, 104, 225, 211, 181, 186, 39, 104, 164, 133, 229, 109, 12, 10, 50, 102, 87, 42, 99, 141, 146, 129, 23, 106, 171, 126, 152, 19, 96, 213, 229, 78, 152, 78, 1, 146, 215, 110, 68, 68, 142, 163, 171, 106, 196, 210, 40, 84, 142, 132, 184, 77, 101, 106, 133, 131, 197, 53, 217, 141, 44, 29, 207, 241, 245, 99, 134, 177, 10, 65, 71, 62, 19, 115, 24, 102, 41, 41, 40, 199, 3, 30, 60, 158, 248, 233, 151, 5, 150, 157, 159, 202, 208, 207, 98, 159, 60, 44, 200, 150, 221, 226, 177, 156, 116, 115, 234, 1, 47, 170, 45, 16, 229, 197, 208, 121, 121, 68, 221, 105, 100, 107, 153, 188, 180, 162, 233, 37, 136, 204, 189, 165, 133, 59, 49, 239, 219, 66, 102, 242, 144, 63, 17, 120, 118, 44, 40, 146, 39, 31, 53, 145, 18, 139, 57, 88, 225, 34, 182, 100, 125, 70, 231, 172, 166, 52, 122, 138, 167, 162, 26, 239, 109, 196, 242, 37, 229, 229, 49, 34, 88, 202, 235, 167, 106, 5, 65, 204, 68, 160, 245, 198, 218, 79, 21, 21, 117, 189, 28, 145, 100, 205, 102, 26, 231, 5, 10, 18, 157, 117, 116, 128, 160, 93, 177, 110, 147, 153, 218, 9, 103, 11, 182, 50, 99, 21, 159, 218, 186, 33, 209, 121, 130, 43, 58, 15, 106, 234, 119, 99, 34, 221, 54, 113, 177, 89, 207, 36, 179, 175, 98, 254, 87, 246, 21, 91, 170, 217, 190, 181, 141, 146, 244, 191, 185, 158, 199, 143, 159, 206, 57, 218, 227, 129, 68, 23, 178, 42, 204, 127, 54, 154, 41, 0, 49, 228, 165, 139, 241, 134, 206, 72, 234, 189, 181, 41, 238, 46, 45, 222, 230, 4, 78, 31, 26, 60, 13, 106, 162, 218, 25, 222, 17, 153, 84, 165, 233, 72, 222, 6, 18, 34, 16, 18, 87, 23, 141, 150, 248, 164, 18, 157, 168, 163, 41, 143, 32, 99, 106, 38, 191, 88, 253, 0, 66, 39, 146, 21, 156, 7, 103, 64, 173, 234, 56, 181, 107, 6, 129, 9, 188, 87, 28, 111, 52, 3, 67, 152, 131, 229, 47, 199, 229, 64, 17, 44, 177, 39, 251, 195, 80, 17, 52, 148, 166, 120, 9, 231, 140, 113, 4, 108, 8, 65, 152, 189, 89, 74, 220, 49, 201, 220, 142, 140, 182, 10, 25, 90, 70, 39, 101, 1, 68, 242, 223, 132, 119, 187, 144, 41, 23, 99, 30, 107, 150, 34, 154, 41, 49, 226, 66, 10, 190, 192, 147, 37, 68, 166, 174, 100, 140, 138, 164, 90, 164, 24, 32, 48, 19, 150, 228, 46, 25, 78, 121, 164, 69, 26, 251, 81, 134, 71, 5, 143, 40, 68, 174, 157, 171, 213, 104, 64, 177, 40, 189, 124, 35, 89, 69, 219, 22, 25, 11, 3, 220, 138, 86, 36, 121, 106, 135, 3, 106, 200, 140, 142, 154, 53, 222, 33, 185, 150, 226, 15, 53, 225, 137, 142, 146, 156, 24, 80, 183, 99, 103, 5, 12, 17, 91, 127, 90, 229, 166, 92, 193, 250, 255, 239, 94, 128, 172, 103, 8, 165, 0, 185, 2, 117, 183, 100, 41, 37, 191, 24, 105, 139, 107, 1, 160, 65, 33, 78, 245, 225, 230, 78, 53, 106, 197, 29, 80, 26, 20, 86, 160, 137, 105, 144, 153, 111, 131, 106, 104, 227, 51, 215, 134, 30, 75, 132, 225, 219, 64, 139, 200, 8, 28, 175, 208, 6, 194, 76, 158, 86, 25, 144, 149, 215, 185, 44, 178, 175, 202, 49, 174, 130, 120, 17, 46, 133, 0, 174, 169, 145, 116, 52, 146, 55, 75, 29, 111, 154, 85, 132, 135, 169, 70, 106, 186, 158, 89, 182, 79, 59, 155, 160, 251, 97, 124, 78, 211, 184, 92, 48, 167, 187, 33, 150, 149, 97, 22, 137, 197, 22, 105, 105, 161, 1, 195, 248, 92, 136, 114, 204, 21, 246, 226, 198, 2, 112, 253, 35, 216, 183, 155, 85, 23, 70, 234, 249, 132, 216, 194, 43, 9, 128, 74, 77, 69, 36, 17, 174, 239, 66, 224, 39, 13, 183, 85, 198, 119, 18, 109, 67, 111, 96, 196, 169, 186, 149, 45, 44, 113, 139, 2, 114, 72, 250, 128, 234, 247, 232, 62, 201, 162, 151, 2, 98, 27, 35, 111, 101, 47, 14, 216, 199, 227, 220, 85, 169, 77, 196, 231, 161, 8, 139, 147, 14, 191, 164, 113, 81, 209, 25, 77, 54, 114, 111, 12, 66, 106, 180, 250, 7, 254, 82, 79}
	msg := []byte{104, 105, 32, 116, 104, 101, 114, 101, 111, 99, 107, 99, 104, 97, 105, 110}

	fmt.Println("msg", msg)
	fmt.Println("prvkey", prvkey)
	fmt.Println("pubkey", pubkey)
	fmt.Println("sig", sig)

	isValid := VerifySignature(pubkey, msg, sig)
	fmt.Println("\nValid signature?", isValid)

	if len(pubkey) != PublicKeyLen {
		t.Errorf("pubkey length mismatch: want: %d have: %d", PublicKeyLen, len(pubkey))
	}
	if len(prvkey) != PrivateKeyLen {
		t.Errorf("private key length mismatch: want: %d have: %d", PrivateKeyLen, len(prvkey))
	}
}

func TestSignatureValidity(t *testing.T) {
	pubkey, prvkey := generateKeyPair()

	msg := []byte("dogep blockchain")
	copy(msg, "hi there")

	sig, err := Sign(msg, prvkey)
	if err != nil {
		t.Errorf("signature error: %s", err)
	}

	isValid := VerifySignature(pubkey, msg, sig)
	if isValid != true {
		t.Errorf("VerifySignature failed")
	}

	if len(pubkey) != PublicKeyLen {
		t.Errorf("pubkey length mismatch: want: %d have: %d", PublicKeyLen, len(pubkey))
	}
	if len(prvkey) != PrivateKeyLen {
		t.Errorf("private key length mismatch: want: %d have: %d", PrivateKeyLen, len(prvkey))
	}
}

func TestInvalidRecoveryID(t *testing.T) {
	_, prvkey := generateKeyPair()
	msg := csprngEntropy(32)
	sig, _ := Sign(msg, prvkey)
	sig[64] = 99
	_, err := RecoverPubkey(msg, sig)
	if err != ErrSignFailed {
		t.Fatalf("got %q, want %q", err, ErrInvalidRecoveryID)
	}
}

func TestSignAndRecover(t *testing.T) {
	pubkey1, prvkey := generateKeyPair()
	msg := csprngEntropy(32)
	sig, err := Sign(msg, prvkey)
	if err != nil {
		t.Errorf("signature error: %s", err)
	}

	pubkey2, err := RecoverPubkey(msg, sig)
	if err != nil {
		t.Errorf("recover error: %s", err)
	}

	if !bytes.Equal(pubkey1, pubkey2) {
		t.Errorf("pubkey mismatch: want: %x have: %x", pubkey1, pubkey2)
	}
}

func TestSignDeterministic(t *testing.T) {
	pub, prvkey := generateKeyPair()

	var privkey = make([]byte, PrivateKeyLen)
	priv := prvkey
	copy(privkey[PrivateKeyLen-len(priv):], priv)

	var pubkey = make([]byte, PublicKeyLen)
	pub1 := pub
	copy(pubkey[PublicKeyLen-len(pub1):], pub1)

	msg := []byte("dogep blockchain")
	copy(msg, "hi there")

	sig1, err := Sign(msg, prvkey)
	if err != nil {
		t.Fatal(err)
	}

	msg1 := []byte("dogep blockchain 123")
	copy(msg1, "hi there 123")

	sig2, err := Sign(msg1, privkey)
	if err != nil {
		t.Fatal(err)
	}

	isValid1 := VerifySignature(pubkey, msg, sig1)
	if isValid1 != true {
		t.Fatal("VerifySignature failed")
	}
	isValid2 := VerifySignature(pubkey, msg1, sig2)
	if isValid2 != true {
		t.Fatal("VerifySignature failed")
	}

	if isValid1 != true || isValid2 != true {
		t.Fatal("signatures not equal")
	}
}

func TestRandomMessagesWithSameKey(t *testing.T) {
	pubkey1, prvkey := generateKeyPair()

	for i := 0; i < 1; i++ {
		prvkeyCopy := make([]byte, len(prvkey))
		copy(prvkeyCopy, prvkey) //Since Sign() cleans up the memory content, need to create copy
		msg := csprngEntropy(32)

		sig, err := Sign(msg, prvkeyCopy)

		if err != nil {
			t.Fatalf("signature error: %s", err)
		}
		if sig == nil {
			t.Fatal("signature is nil")
		}

		pubkey2, err := RecoverPubkey(msg, sig)
		if err != nil {
			t.Fatalf("recover error: %s", err)
		}
		if pubkey2 == nil {
			t.Error("pubkey is nil")
		}
		if !bytes.Equal(pubkey1, pubkey2) {
			t.Fatalf("pubkey mismatch: want: %x have: %x", pubkey1, pubkey2)
		}

	}

	keys := func() ([]byte, []byte) {
		return pubkey1, prvkey
	}

	signAndRecoverWithRandomMessages(t, keys)
}

func TestRandomMessagesWithRandomKeys(t *testing.T) {
	keys := func() ([]byte, []byte) {
		pubkey, prvkey := generateKeyPair()
		return pubkey, prvkey
	}
	signAndRecoverWithRandomMessages(t, keys)
}

func signAndRecoverWithRandomMessages(t *testing.T, keys func() ([]byte, []byte)) {

	for i := 0; i < TestCount; i++ {
		pubkey1, prvkey := keys()
		prvkeyCopy := make([]byte, len(prvkey))
		copy(prvkeyCopy, prvkey) //Since Sign() cleans up the memory content, need to create copy

		msg := csprngEntropy(32)
		sig, err := Sign(msg, prvkeyCopy)
		if err != nil {
			t.Fatalf("signature error: %s, %d", err, i)
		}
		if sig == nil {
			t.Fatal("signature is nil")
		}

		pubkey2, err := RecoverPubkey(msg, sig)
		if err != nil {
			t.Fatalf("recover error: %s", err)
		}
		if pubkey2 == nil {
			t.Error("pubkey is nil")
		}
		if !bytes.Equal(pubkey1, pubkey2) {
			t.Fatalf("pubkey mismatch: want: %x have: %x", pubkey1, pubkey2)
		}
	}
}

func TestRandomMessagesAgainstValidSig(t *testing.T) {
	pubkey1, prvkey := generateKeyPair()
	msg := csprngEntropy(32)
	sig, _ := Sign(msg, prvkey)

	for i := 0; i < TestCount; i++ {
		msg = csprngEntropy(32)
		pubkey2, _ := RecoverPubkey(msg, sig)
		// recovery can sometimes work, but if so should always give wrong pubkey
		if bytes.Equal(pubkey1, pubkey2) {
			t.Fatalf("iteration: %d: pubkey mismatch: do NOT want %x: ", i, pubkey2)
		}
	}
}

func BenchmarkSign(b *testing.B) {
	_, prvkey := generateKeyPair()
	msg := csprngEntropy(32)
	b.ResetTimer()

	for i := 0; i < b.N; i++ {
		Sign(msg, prvkey)
	}
}

func BenchmarkRecover(b *testing.B) {
	msg := csprngEntropy(32)
	_, prvkey := generateKeyPair()
	sig, _ := Sign(msg, prvkey)
	b.ResetTimer()

	for i := 0; i < b.N; i++ {
		RecoverPubkey(msg, sig)
	}
}
