// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package stakingv2

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/DogeProtocol/dp"
	"github.com/DogeProtocol/dp/accounts/abi"
	"github.com/DogeProtocol/dp/accounts/abi/bind"
	"github.com/DogeProtocol/dp/common"
	"github.com/DogeProtocol/dp/core/types"
	"github.com/DogeProtocol/dp/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// IStakingContractStakingDetails is an auto generated low-level Go binding around an user-defined struct.
type IStakingContractStakingDetails struct {
	Depositor           common.Address
	Validator           common.Address
	Balance             *big.Int
	NetBalance          *big.Int
	BlockRewards        *big.Int
	Slashings           *big.Int
	IsValidationPaused  bool
	WithdrawalBlock     *big.Int
	WithdrawalAmount    *big.Int
	NewDepositorAddress common.Address
	LastNilBlockNumber  *big.Int
	NilBlockCount       *big.Int
}

// StakingMetaData contains all meta data concerning the Staking contract.
var StakingMetaData = &bind.MetaData{
	ABI: "[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldValidatorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newValidatorAddress\",\"type\":\"address\"}],\"name\":\"OnChangeValidator\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldDepositorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDepositorAddress\",\"type\":\"address\"}],\"name\":\"OnCompleteChangeDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalQuantity\",\"type\":\"uint256\"}],\"name\":\"OnCompletePartialWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"netBalance\",\"type\":\"uint256\"}],\"name\":\"OnCompleteWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldBalance\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newBalance\",\"type\":\"uint256\"}],\"name\":\"OnIncreaseDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"oldDepositorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newDepositorAddress\",\"type\":\"address\"}],\"name\":\"OnInitiateChangeDepositor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawalQuantity\",\"type\":\"uint256\"}],\"name\":\"OnInitiatePartialWithdrawal\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"validatorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockTime\",\"type\":\"uint256\"}],\"name\":\"OnNewDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validatorAddress\",\"type\":\"address\"}],\"name\":\"OnPauseValidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"validatorAddress\",\"type\":\"address\"}],\"name\":\"OnResumeValidation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"OnReward\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"depositorAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"slashedAmount\",\"type\":\"uint256\"}],\"name\":\"OnSlashing\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rewardAmount\",\"type\":\"uint256\"}],\"name\":\"addDepositorReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"slashAmount\",\"type\":\"uint256\"}],\"name\":\"addDepositorSlashing\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newValidatorAddress\",\"type\":\"address\"}],\"name\":\"changeValidator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"oldDepositorAddress\",\"type\":\"address\"}],\"name\":\"completeChangeDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completePartialWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"completeWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositorAddress\",\"type\":\"address\"}],\"name\":\"didDepositorEverExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorAddress\",\"type\":\"address\"}],\"name\":\"didValidatorEverExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositorAddress\",\"type\":\"address\"}],\"name\":\"doesDepositorExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorAddress\",\"type\":\"address\"}],\"name\":\"doesValidatorExist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositorAddress\",\"type\":\"address\"}],\"name\":\"getBalanceOfDepositor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositorCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorAddress\",\"type\":\"address\"}],\"name\":\"getDepositorOfValidator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositorAddress\",\"type\":\"address\"}],\"name\":\"getDepositorRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositorAddress\",\"type\":\"address\"}],\"name\":\"getDepositorSlashings\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositorAddress\",\"type\":\"address\"}],\"name\":\"getNetBalanceOfDepositor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorAddress\",\"type\":\"address\"}],\"name\":\"getStakingDetails\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"Depositor\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"Validator\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"Balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NetBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"BlockRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Slashings\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"IsValidationPaused\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"WithdrawalBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"WithdrawalAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"NewDepositorAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"LastNilBlockNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"NilBlockCount\",\"type\":\"uint256\"}],\"internalType\":\"structIStakingContract.StakingDetails\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalDepositedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositorAddress\",\"type\":\"address\"}],\"name\":\"getValidatorOfDepositor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositorAddress\",\"type\":\"address\"}],\"name\":\"getWithdrawalBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"increaseDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newDepositorAddress\",\"type\":\"address\"}],\"name\":\"initiateChangeDepositor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"initiatePartialWithdrawal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorAddress\",\"type\":\"address\"}],\"name\":\"isValidationPaused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"listValidators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorAddress\",\"type\":\"address\"}],\"name\":\"newDeposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseValidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorAddress\",\"type\":\"address\"}],\"name\":\"resetNilBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resumeValidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"validatorAddress\",\"type\":\"address\"}],\"name\":\"setNilBlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "",
}

// StakingABI is the input ABI used to generate the binding from.
// Deprecated: Use StakingMetaData.ABI instead.
var StakingABI = StakingMetaData.ABI

// StakingBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use StakingMetaData.Bin instead.
var StakingBin = StakingMetaData.Bin

// DeployStaking deploys a new Ethereum contract, binding an instance of Staking to it.
func DeployStaking(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *Staking, error) {
	parsed, err := StakingMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(StakingBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Staking{StakingCaller: StakingCaller{contract: contract}, StakingTransactor: StakingTransactor{contract: contract}, StakingFilterer: StakingFilterer{contract: contract}}, nil
}

// Staking is an auto generated Go binding around an Ethereum contract.
type Staking struct {
	StakingCaller     // Read-only binding to the contract
	StakingTransactor // Write-only binding to the contract
	StakingFilterer   // Log filterer for contract events
}

// StakingCaller is an auto generated read-only Go binding around an Ethereum contract.
type StakingCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingTransactor is an auto generated write-only Go binding around an Ethereum contract.
type StakingTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type StakingFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// StakingSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type StakingSession struct {
	Contract     *Staking          // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// StakingCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type StakingCallerSession struct {
	Contract *StakingCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts  // Call options to use throughout this session
}

// StakingTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type StakingTransactorSession struct {
	Contract     *StakingTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts  // Transaction auth options to use throughout this session
}

// StakingRaw is an auto generated low-level Go binding around an Ethereum contract.
type StakingRaw struct {
	Contract *Staking // Generic contract binding to access the raw methods on
}

// StakingCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type StakingCallerRaw struct {
	Contract *StakingCaller // Generic read-only contract binding to access the raw methods on
}

// StakingTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type StakingTransactorRaw struct {
	Contract *StakingTransactor // Generic write-only contract binding to access the raw methods on
}

// NewStaking creates a new instance of Staking, bound to a specific deployed contract.
func NewStaking(address common.Address, backend bind.ContractBackend) (*Staking, error) {
	contract, err := bindStaking(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Staking{StakingCaller: StakingCaller{contract: contract}, StakingTransactor: StakingTransactor{contract: contract}, StakingFilterer: StakingFilterer{contract: contract}}, nil
}

// NewStakingCaller creates a new read-only instance of Staking, bound to a specific deployed contract.
func NewStakingCaller(address common.Address, caller bind.ContractCaller) (*StakingCaller, error) {
	contract, err := bindStaking(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &StakingCaller{contract: contract}, nil
}

// NewStakingTransactor creates a new write-only instance of Staking, bound to a specific deployed contract.
func NewStakingTransactor(address common.Address, transactor bind.ContractTransactor) (*StakingTransactor, error) {
	contract, err := bindStaking(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &StakingTransactor{contract: contract}, nil
}

// NewStakingFilterer creates a new log filterer instance of Staking, bound to a specific deployed contract.
func NewStakingFilterer(address common.Address, filterer bind.ContractFilterer) (*StakingFilterer, error) {
	contract, err := bindStaking(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &StakingFilterer{contract: contract}, nil
}

// bindStaking binds a generic wrapper to an already deployed contract.
func bindStaking(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(StakingABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Staking *StakingRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Staking.Contract.StakingCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Staking *StakingRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.Contract.StakingTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Staking *StakingRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Staking.Contract.StakingTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Staking *StakingCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Staking.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Staking *StakingTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Staking *StakingTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Staking.Contract.contract.Transact(opts, method, params...)
}

// DidDepositorEverExist is a free data retrieval call binding the contract method 0x38c70a60.
//
// Solidity: function didDepositorEverExist(address depositorAddress) view returns(bool)
func (_Staking *StakingCaller) DidDepositorEverExist(opts *bind.CallOpts, depositorAddress common.Address) (bool, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "didDepositorEverExist", depositorAddress)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// DidDepositorEverExist is a free data retrieval call binding the contract method 0x38c70a60.
//
// Solidity: function didDepositorEverExist(address depositorAddress) view returns(bool)
func (_Staking *StakingSession) DidDepositorEverExist(depositorAddress common.Address) (bool, error) {
	return _Staking.Contract.DidDepositorEverExist(&_Staking.CallOpts, depositorAddress)
}

// DidDepositorEverExist is a free data retrieval call binding the contract method 0x38c70a60.
//
// Solidity: function didDepositorEverExist(address depositorAddress) view returns(bool)
func (_Staking *StakingCallerSession) DidDepositorEverExist(depositorAddress common.Address) (bool, error) {
	return _Staking.Contract.DidDepositorEverExist(&_Staking.CallOpts, depositorAddress)
}

// DidValidatorEverExist is a free data retrieval call binding the contract method 0x6d1e33cd.
//
// Solidity: function didValidatorEverExist(address validatorAddress) view returns(bool)
func (_Staking *StakingCaller) DidValidatorEverExist(opts *bind.CallOpts, validatorAddress common.Address) (bool, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "didValidatorEverExist", validatorAddress)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// DidValidatorEverExist is a free data retrieval call binding the contract method 0x6d1e33cd.
//
// Solidity: function didValidatorEverExist(address validatorAddress) view returns(bool)
func (_Staking *StakingSession) DidValidatorEverExist(validatorAddress common.Address) (bool, error) {
	return _Staking.Contract.DidValidatorEverExist(&_Staking.CallOpts, validatorAddress)
}

// DidValidatorEverExist is a free data retrieval call binding the contract method 0x6d1e33cd.
//
// Solidity: function didValidatorEverExist(address validatorAddress) view returns(bool)
func (_Staking *StakingCallerSession) DidValidatorEverExist(validatorAddress common.Address) (bool, error) {
	return _Staking.Contract.DidValidatorEverExist(&_Staking.CallOpts, validatorAddress)
}

// DoesDepositorExist is a free data retrieval call binding the contract method 0xdd77e5cc.
//
// Solidity: function doesDepositorExist(address depositorAddress) view returns(bool)
func (_Staking *StakingCaller) DoesDepositorExist(opts *bind.CallOpts, depositorAddress common.Address) (bool, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "doesDepositorExist", depositorAddress)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// DoesDepositorExist is a free data retrieval call binding the contract method 0xdd77e5cc.
//
// Solidity: function doesDepositorExist(address depositorAddress) view returns(bool)
func (_Staking *StakingSession) DoesDepositorExist(depositorAddress common.Address) (bool, error) {
	return _Staking.Contract.DoesDepositorExist(&_Staking.CallOpts, depositorAddress)
}

// DoesDepositorExist is a free data retrieval call binding the contract method 0xdd77e5cc.
//
// Solidity: function doesDepositorExist(address depositorAddress) view returns(bool)
func (_Staking *StakingCallerSession) DoesDepositorExist(depositorAddress common.Address) (bool, error) {
	return _Staking.Contract.DoesDepositorExist(&_Staking.CallOpts, depositorAddress)
}

// DoesValidatorExist is a free data retrieval call binding the contract method 0xb1128612.
//
// Solidity: function doesValidatorExist(address validatorAddress) view returns(bool)
func (_Staking *StakingCaller) DoesValidatorExist(opts *bind.CallOpts, validatorAddress common.Address) (bool, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "doesValidatorExist", validatorAddress)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// DoesValidatorExist is a free data retrieval call binding the contract method 0xb1128612.
//
// Solidity: function doesValidatorExist(address validatorAddress) view returns(bool)
func (_Staking *StakingSession) DoesValidatorExist(validatorAddress common.Address) (bool, error) {
	return _Staking.Contract.DoesValidatorExist(&_Staking.CallOpts, validatorAddress)
}

// DoesValidatorExist is a free data retrieval call binding the contract method 0xb1128612.
//
// Solidity: function doesValidatorExist(address validatorAddress) view returns(bool)
func (_Staking *StakingCallerSession) DoesValidatorExist(validatorAddress common.Address) (bool, error) {
	return _Staking.Contract.DoesValidatorExist(&_Staking.CallOpts, validatorAddress)
}

// GetBalanceOfDepositor is a free data retrieval call binding the contract method 0x77c06fdc.
//
// Solidity: function getBalanceOfDepositor(address depositorAddress) view returns(uint256)
func (_Staking *StakingCaller) GetBalanceOfDepositor(opts *bind.CallOpts, depositorAddress common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "getBalanceOfDepositor", depositorAddress)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetBalanceOfDepositor is a free data retrieval call binding the contract method 0x77c06fdc.
//
// Solidity: function getBalanceOfDepositor(address depositorAddress) view returns(uint256)
func (_Staking *StakingSession) GetBalanceOfDepositor(depositorAddress common.Address) (*big.Int, error) {
	return _Staking.Contract.GetBalanceOfDepositor(&_Staking.CallOpts, depositorAddress)
}

// GetBalanceOfDepositor is a free data retrieval call binding the contract method 0x77c06fdc.
//
// Solidity: function getBalanceOfDepositor(address depositorAddress) view returns(uint256)
func (_Staking *StakingCallerSession) GetBalanceOfDepositor(depositorAddress common.Address) (*big.Int, error) {
	return _Staking.Contract.GetBalanceOfDepositor(&_Staking.CallOpts, depositorAddress)
}

// GetDepositorCount is a free data retrieval call binding the contract method 0xf17bb462.
//
// Solidity: function getDepositorCount() view returns(uint256)
func (_Staking *StakingCaller) GetDepositorCount(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "getDepositorCount")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDepositorCount is a free data retrieval call binding the contract method 0xf17bb462.
//
// Solidity: function getDepositorCount() view returns(uint256)
func (_Staking *StakingSession) GetDepositorCount() (*big.Int, error) {
	return _Staking.Contract.GetDepositorCount(&_Staking.CallOpts)
}

// GetDepositorCount is a free data retrieval call binding the contract method 0xf17bb462.
//
// Solidity: function getDepositorCount() view returns(uint256)
func (_Staking *StakingCallerSession) GetDepositorCount() (*big.Int, error) {
	return _Staking.Contract.GetDepositorCount(&_Staking.CallOpts)
}

// GetDepositorOfValidator is a free data retrieval call binding the contract method 0x6d727bd0.
//
// Solidity: function getDepositorOfValidator(address validatorAddress) view returns(address)
func (_Staking *StakingCaller) GetDepositorOfValidator(opts *bind.CallOpts, validatorAddress common.Address) (common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "getDepositorOfValidator", validatorAddress)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetDepositorOfValidator is a free data retrieval call binding the contract method 0x6d727bd0.
//
// Solidity: function getDepositorOfValidator(address validatorAddress) view returns(address)
func (_Staking *StakingSession) GetDepositorOfValidator(validatorAddress common.Address) (common.Address, error) {
	return _Staking.Contract.GetDepositorOfValidator(&_Staking.CallOpts, validatorAddress)
}

// GetDepositorOfValidator is a free data retrieval call binding the contract method 0x6d727bd0.
//
// Solidity: function getDepositorOfValidator(address validatorAddress) view returns(address)
func (_Staking *StakingCallerSession) GetDepositorOfValidator(validatorAddress common.Address) (common.Address, error) {
	return _Staking.Contract.GetDepositorOfValidator(&_Staking.CallOpts, validatorAddress)
}

// GetDepositorRewards is a free data retrieval call binding the contract method 0x2ca3c041.
//
// Solidity: function getDepositorRewards(address depositorAddress) view returns(uint256)
func (_Staking *StakingCaller) GetDepositorRewards(opts *bind.CallOpts, depositorAddress common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "getDepositorRewards", depositorAddress)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDepositorRewards is a free data retrieval call binding the contract method 0x2ca3c041.
//
// Solidity: function getDepositorRewards(address depositorAddress) view returns(uint256)
func (_Staking *StakingSession) GetDepositorRewards(depositorAddress common.Address) (*big.Int, error) {
	return _Staking.Contract.GetDepositorRewards(&_Staking.CallOpts, depositorAddress)
}

// GetDepositorRewards is a free data retrieval call binding the contract method 0x2ca3c041.
//
// Solidity: function getDepositorRewards(address depositorAddress) view returns(uint256)
func (_Staking *StakingCallerSession) GetDepositorRewards(depositorAddress common.Address) (*big.Int, error) {
	return _Staking.Contract.GetDepositorRewards(&_Staking.CallOpts, depositorAddress)
}

// GetDepositorSlashings is a free data retrieval call binding the contract method 0xc200baf9.
//
// Solidity: function getDepositorSlashings(address depositorAddress) view returns(uint256)
func (_Staking *StakingCaller) GetDepositorSlashings(opts *bind.CallOpts, depositorAddress common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "getDepositorSlashings", depositorAddress)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetDepositorSlashings is a free data retrieval call binding the contract method 0xc200baf9.
//
// Solidity: function getDepositorSlashings(address depositorAddress) view returns(uint256)
func (_Staking *StakingSession) GetDepositorSlashings(depositorAddress common.Address) (*big.Int, error) {
	return _Staking.Contract.GetDepositorSlashings(&_Staking.CallOpts, depositorAddress)
}

// GetDepositorSlashings is a free data retrieval call binding the contract method 0xc200baf9.
//
// Solidity: function getDepositorSlashings(address depositorAddress) view returns(uint256)
func (_Staking *StakingCallerSession) GetDepositorSlashings(depositorAddress common.Address) (*big.Int, error) {
	return _Staking.Contract.GetDepositorSlashings(&_Staking.CallOpts, depositorAddress)
}

// GetNetBalanceOfDepositor is a free data retrieval call binding the contract method 0x4f4af09e.
//
// Solidity: function getNetBalanceOfDepositor(address depositorAddress) view returns(uint256)
func (_Staking *StakingCaller) GetNetBalanceOfDepositor(opts *bind.CallOpts, depositorAddress common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "getNetBalanceOfDepositor", depositorAddress)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetNetBalanceOfDepositor is a free data retrieval call binding the contract method 0x4f4af09e.
//
// Solidity: function getNetBalanceOfDepositor(address depositorAddress) view returns(uint256)
func (_Staking *StakingSession) GetNetBalanceOfDepositor(depositorAddress common.Address) (*big.Int, error) {
	return _Staking.Contract.GetNetBalanceOfDepositor(&_Staking.CallOpts, depositorAddress)
}

// GetNetBalanceOfDepositor is a free data retrieval call binding the contract method 0x4f4af09e.
//
// Solidity: function getNetBalanceOfDepositor(address depositorAddress) view returns(uint256)
func (_Staking *StakingCallerSession) GetNetBalanceOfDepositor(depositorAddress common.Address) (*big.Int, error) {
	return _Staking.Contract.GetNetBalanceOfDepositor(&_Staking.CallOpts, depositorAddress)
}

// GetStakingDetails is a free data retrieval call binding the contract method 0x6f5492e2.
//
// Solidity: function getStakingDetails(address validatorAddress) view returns((address,address,uint256,uint256,uint256,uint256,bool,uint256,uint256,address,uint256,uint256))
func (_Staking *StakingCaller) GetStakingDetails(opts *bind.CallOpts, validatorAddress common.Address) (IStakingContractStakingDetails, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "getStakingDetails", validatorAddress)

	if err != nil {
		return *new(IStakingContractStakingDetails), err
	}

	out0 := *abi.ConvertType(out[0], new(IStakingContractStakingDetails)).(*IStakingContractStakingDetails)

	return out0, err

}

// GetStakingDetails is a free data retrieval call binding the contract method 0x6f5492e2.
//
// Solidity: function getStakingDetails(address validatorAddress) view returns((address,address,uint256,uint256,uint256,uint256,bool,uint256,uint256,address,uint256,uint256))
func (_Staking *StakingSession) GetStakingDetails(validatorAddress common.Address) (IStakingContractStakingDetails, error) {
	return _Staking.Contract.GetStakingDetails(&_Staking.CallOpts, validatorAddress)
}

// GetStakingDetails is a free data retrieval call binding the contract method 0x6f5492e2.
//
// Solidity: function getStakingDetails(address validatorAddress) view returns((address,address,uint256,uint256,uint256,uint256,bool,uint256,uint256,address,uint256,uint256))
func (_Staking *StakingCallerSession) GetStakingDetails(validatorAddress common.Address) (IStakingContractStakingDetails, error) {
	return _Staking.Contract.GetStakingDetails(&_Staking.CallOpts, validatorAddress)
}

// GetTotalDepositedBalance is a free data retrieval call binding the contract method 0xff9205ab.
//
// Solidity: function getTotalDepositedBalance() view returns(uint256)
func (_Staking *StakingCaller) GetTotalDepositedBalance(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "getTotalDepositedBalance")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalDepositedBalance is a free data retrieval call binding the contract method 0xff9205ab.
//
// Solidity: function getTotalDepositedBalance() view returns(uint256)
func (_Staking *StakingSession) GetTotalDepositedBalance() (*big.Int, error) {
	return _Staking.Contract.GetTotalDepositedBalance(&_Staking.CallOpts)
}

// GetTotalDepositedBalance is a free data retrieval call binding the contract method 0xff9205ab.
//
// Solidity: function getTotalDepositedBalance() view returns(uint256)
func (_Staking *StakingCallerSession) GetTotalDepositedBalance() (*big.Int, error) {
	return _Staking.Contract.GetTotalDepositedBalance(&_Staking.CallOpts)
}

// GetValidatorOfDepositor is a free data retrieval call binding the contract method 0xa7113fee.
//
// Solidity: function getValidatorOfDepositor(address depositorAddress) view returns(address)
func (_Staking *StakingCaller) GetValidatorOfDepositor(opts *bind.CallOpts, depositorAddress common.Address) (common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "getValidatorOfDepositor", depositorAddress)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetValidatorOfDepositor is a free data retrieval call binding the contract method 0xa7113fee.
//
// Solidity: function getValidatorOfDepositor(address depositorAddress) view returns(address)
func (_Staking *StakingSession) GetValidatorOfDepositor(depositorAddress common.Address) (common.Address, error) {
	return _Staking.Contract.GetValidatorOfDepositor(&_Staking.CallOpts, depositorAddress)
}

// GetValidatorOfDepositor is a free data retrieval call binding the contract method 0xa7113fee.
//
// Solidity: function getValidatorOfDepositor(address depositorAddress) view returns(address)
func (_Staking *StakingCallerSession) GetValidatorOfDepositor(depositorAddress common.Address) (common.Address, error) {
	return _Staking.Contract.GetValidatorOfDepositor(&_Staking.CallOpts, depositorAddress)
}

// GetWithdrawalBlock is a free data retrieval call binding the contract method 0x51cb11ab.
//
// Solidity: function getWithdrawalBlock(address depositorAddress) view returns(uint256)
func (_Staking *StakingCaller) GetWithdrawalBlock(opts *bind.CallOpts, depositorAddress common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "getWithdrawalBlock", depositorAddress)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetWithdrawalBlock is a free data retrieval call binding the contract method 0x51cb11ab.
//
// Solidity: function getWithdrawalBlock(address depositorAddress) view returns(uint256)
func (_Staking *StakingSession) GetWithdrawalBlock(depositorAddress common.Address) (*big.Int, error) {
	return _Staking.Contract.GetWithdrawalBlock(&_Staking.CallOpts, depositorAddress)
}

// GetWithdrawalBlock is a free data retrieval call binding the contract method 0x51cb11ab.
//
// Solidity: function getWithdrawalBlock(address depositorAddress) view returns(uint256)
func (_Staking *StakingCallerSession) GetWithdrawalBlock(depositorAddress common.Address) (*big.Int, error) {
	return _Staking.Contract.GetWithdrawalBlock(&_Staking.CallOpts, depositorAddress)
}

// IsValidationPaused is a free data retrieval call binding the contract method 0x3e3bc1a7.
//
// Solidity: function isValidationPaused(address validatorAddress) view returns(bool)
func (_Staking *StakingCaller) IsValidationPaused(opts *bind.CallOpts, validatorAddress common.Address) (bool, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "isValidationPaused", validatorAddress)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsValidationPaused is a free data retrieval call binding the contract method 0x3e3bc1a7.
//
// Solidity: function isValidationPaused(address validatorAddress) view returns(bool)
func (_Staking *StakingSession) IsValidationPaused(validatorAddress common.Address) (bool, error) {
	return _Staking.Contract.IsValidationPaused(&_Staking.CallOpts, validatorAddress)
}

// IsValidationPaused is a free data retrieval call binding the contract method 0x3e3bc1a7.
//
// Solidity: function isValidationPaused(address validatorAddress) view returns(bool)
func (_Staking *StakingCallerSession) IsValidationPaused(validatorAddress common.Address) (bool, error) {
	return _Staking.Contract.IsValidationPaused(&_Staking.CallOpts, validatorAddress)
}

// ListValidators is a free data retrieval call binding the contract method 0x68d4e544.
//
// Solidity: function listValidators() view returns(address[])
func (_Staking *StakingCaller) ListValidators(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _Staking.contract.Call(opts, &out, "listValidators")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// ListValidators is a free data retrieval call binding the contract method 0x68d4e544.
//
// Solidity: function listValidators() view returns(address[])
func (_Staking *StakingSession) ListValidators() ([]common.Address, error) {
	return _Staking.Contract.ListValidators(&_Staking.CallOpts)
}

// ListValidators is a free data retrieval call binding the contract method 0x68d4e544.
//
// Solidity: function listValidators() view returns(address[])
func (_Staking *StakingCallerSession) ListValidators() ([]common.Address, error) {
	return _Staking.Contract.ListValidators(&_Staking.CallOpts)
}

// AddDepositorReward is a paid mutator transaction binding the contract method 0x7942317c.
//
// Solidity: function addDepositorReward(address depositorAddress, uint256 rewardAmount) returns(uint256)
func (_Staking *StakingTransactor) AddDepositorReward(opts *bind.TransactOpts, depositorAddress common.Address, rewardAmount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "addDepositorReward", depositorAddress, rewardAmount)
}

// AddDepositorReward is a paid mutator transaction binding the contract method 0x7942317c.
//
// Solidity: function addDepositorReward(address depositorAddress, uint256 rewardAmount) returns(uint256)
func (_Staking *StakingSession) AddDepositorReward(depositorAddress common.Address, rewardAmount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.AddDepositorReward(&_Staking.TransactOpts, depositorAddress, rewardAmount)
}

// AddDepositorReward is a paid mutator transaction binding the contract method 0x7942317c.
//
// Solidity: function addDepositorReward(address depositorAddress, uint256 rewardAmount) returns(uint256)
func (_Staking *StakingTransactorSession) AddDepositorReward(depositorAddress common.Address, rewardAmount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.AddDepositorReward(&_Staking.TransactOpts, depositorAddress, rewardAmount)
}

// AddDepositorSlashing is a paid mutator transaction binding the contract method 0x51ca5317.
//
// Solidity: function addDepositorSlashing(address depositorAddress, uint256 slashAmount) returns(uint256)
func (_Staking *StakingTransactor) AddDepositorSlashing(opts *bind.TransactOpts, depositorAddress common.Address, slashAmount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "addDepositorSlashing", depositorAddress, slashAmount)
}

// AddDepositorSlashing is a paid mutator transaction binding the contract method 0x51ca5317.
//
// Solidity: function addDepositorSlashing(address depositorAddress, uint256 slashAmount) returns(uint256)
func (_Staking *StakingSession) AddDepositorSlashing(depositorAddress common.Address, slashAmount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.AddDepositorSlashing(&_Staking.TransactOpts, depositorAddress, slashAmount)
}

// AddDepositorSlashing is a paid mutator transaction binding the contract method 0x51ca5317.
//
// Solidity: function addDepositorSlashing(address depositorAddress, uint256 slashAmount) returns(uint256)
func (_Staking *StakingTransactorSession) AddDepositorSlashing(depositorAddress common.Address, slashAmount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.AddDepositorSlashing(&_Staking.TransactOpts, depositorAddress, slashAmount)
}

// ChangeValidator is a paid mutator transaction binding the contract method 0xf6abfc76.
//
// Solidity: function changeValidator(address newValidatorAddress) returns()
func (_Staking *StakingTransactor) ChangeValidator(opts *bind.TransactOpts, newValidatorAddress common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "changeValidator", newValidatorAddress)
}

// ChangeValidator is a paid mutator transaction binding the contract method 0xf6abfc76.
//
// Solidity: function changeValidator(address newValidatorAddress) returns()
func (_Staking *StakingSession) ChangeValidator(newValidatorAddress common.Address) (*types.Transaction, error) {
	return _Staking.Contract.ChangeValidator(&_Staking.TransactOpts, newValidatorAddress)
}

// ChangeValidator is a paid mutator transaction binding the contract method 0xf6abfc76.
//
// Solidity: function changeValidator(address newValidatorAddress) returns()
func (_Staking *StakingTransactorSession) ChangeValidator(newValidatorAddress common.Address) (*types.Transaction, error) {
	return _Staking.Contract.ChangeValidator(&_Staking.TransactOpts, newValidatorAddress)
}

// CompleteChangeDepositor is a paid mutator transaction binding the contract method 0xd10d8ba0.
//
// Solidity: function completeChangeDepositor(address oldDepositorAddress) returns()
func (_Staking *StakingTransactor) CompleteChangeDepositor(opts *bind.TransactOpts, oldDepositorAddress common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "completeChangeDepositor", oldDepositorAddress)
}

// CompleteChangeDepositor is a paid mutator transaction binding the contract method 0xd10d8ba0.
//
// Solidity: function completeChangeDepositor(address oldDepositorAddress) returns()
func (_Staking *StakingSession) CompleteChangeDepositor(oldDepositorAddress common.Address) (*types.Transaction, error) {
	return _Staking.Contract.CompleteChangeDepositor(&_Staking.TransactOpts, oldDepositorAddress)
}

// CompleteChangeDepositor is a paid mutator transaction binding the contract method 0xd10d8ba0.
//
// Solidity: function completeChangeDepositor(address oldDepositorAddress) returns()
func (_Staking *StakingTransactorSession) CompleteChangeDepositor(oldDepositorAddress common.Address) (*types.Transaction, error) {
	return _Staking.Contract.CompleteChangeDepositor(&_Staking.TransactOpts, oldDepositorAddress)
}

// CompletePartialWithdrawal is a paid mutator transaction binding the contract method 0x053a4b3b.
//
// Solidity: function completePartialWithdrawal() returns(uint256)
func (_Staking *StakingTransactor) CompletePartialWithdrawal(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "completePartialWithdrawal")
}

// CompletePartialWithdrawal is a paid mutator transaction binding the contract method 0x053a4b3b.
//
// Solidity: function completePartialWithdrawal() returns(uint256)
func (_Staking *StakingSession) CompletePartialWithdrawal() (*types.Transaction, error) {
	return _Staking.Contract.CompletePartialWithdrawal(&_Staking.TransactOpts)
}

// CompletePartialWithdrawal is a paid mutator transaction binding the contract method 0x053a4b3b.
//
// Solidity: function completePartialWithdrawal() returns(uint256)
func (_Staking *StakingTransactorSession) CompletePartialWithdrawal() (*types.Transaction, error) {
	return _Staking.Contract.CompletePartialWithdrawal(&_Staking.TransactOpts)
}

// CompleteWithdrawal is a paid mutator transaction binding the contract method 0xe03ff7cb.
//
// Solidity: function completeWithdrawal() returns(uint256)
func (_Staking *StakingTransactor) CompleteWithdrawal(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "completeWithdrawal")
}

// CompleteWithdrawal is a paid mutator transaction binding the contract method 0xe03ff7cb.
//
// Solidity: function completeWithdrawal() returns(uint256)
func (_Staking *StakingSession) CompleteWithdrawal() (*types.Transaction, error) {
	return _Staking.Contract.CompleteWithdrawal(&_Staking.TransactOpts)
}

// CompleteWithdrawal is a paid mutator transaction binding the contract method 0xe03ff7cb.
//
// Solidity: function completeWithdrawal() returns(uint256)
func (_Staking *StakingTransactorSession) CompleteWithdrawal() (*types.Transaction, error) {
	return _Staking.Contract.CompleteWithdrawal(&_Staking.TransactOpts)
}

// IncreaseDeposit is a paid mutator transaction binding the contract method 0x05b050de.
//
// Solidity: function increaseDeposit() payable returns()
func (_Staking *StakingTransactor) IncreaseDeposit(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "increaseDeposit")
}

// IncreaseDeposit is a paid mutator transaction binding the contract method 0x05b050de.
//
// Solidity: function increaseDeposit() payable returns()
func (_Staking *StakingSession) IncreaseDeposit() (*types.Transaction, error) {
	return _Staking.Contract.IncreaseDeposit(&_Staking.TransactOpts)
}

// IncreaseDeposit is a paid mutator transaction binding the contract method 0x05b050de.
//
// Solidity: function increaseDeposit() payable returns()
func (_Staking *StakingTransactorSession) IncreaseDeposit() (*types.Transaction, error) {
	return _Staking.Contract.IncreaseDeposit(&_Staking.TransactOpts)
}

// InitiateChangeDepositor is a paid mutator transaction binding the contract method 0x5ca9f7d1.
//
// Solidity: function initiateChangeDepositor(address newDepositorAddress) returns()
func (_Staking *StakingTransactor) InitiateChangeDepositor(opts *bind.TransactOpts, newDepositorAddress common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "initiateChangeDepositor", newDepositorAddress)
}

// InitiateChangeDepositor is a paid mutator transaction binding the contract method 0x5ca9f7d1.
//
// Solidity: function initiateChangeDepositor(address newDepositorAddress) returns()
func (_Staking *StakingSession) InitiateChangeDepositor(newDepositorAddress common.Address) (*types.Transaction, error) {
	return _Staking.Contract.InitiateChangeDepositor(&_Staking.TransactOpts, newDepositorAddress)
}

// InitiateChangeDepositor is a paid mutator transaction binding the contract method 0x5ca9f7d1.
//
// Solidity: function initiateChangeDepositor(address newDepositorAddress) returns()
func (_Staking *StakingTransactorSession) InitiateChangeDepositor(newDepositorAddress common.Address) (*types.Transaction, error) {
	return _Staking.Contract.InitiateChangeDepositor(&_Staking.TransactOpts, newDepositorAddress)
}

// InitiatePartialWithdrawal is a paid mutator transaction binding the contract method 0x963f4189.
//
// Solidity: function initiatePartialWithdrawal(uint256 amount) returns(uint256)
func (_Staking *StakingTransactor) InitiatePartialWithdrawal(opts *bind.TransactOpts, amount *big.Int) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "initiatePartialWithdrawal", amount)
}

// InitiatePartialWithdrawal is a paid mutator transaction binding the contract method 0x963f4189.
//
// Solidity: function initiatePartialWithdrawal(uint256 amount) returns(uint256)
func (_Staking *StakingSession) InitiatePartialWithdrawal(amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.InitiatePartialWithdrawal(&_Staking.TransactOpts, amount)
}

// InitiatePartialWithdrawal is a paid mutator transaction binding the contract method 0x963f4189.
//
// Solidity: function initiatePartialWithdrawal(uint256 amount) returns(uint256)
func (_Staking *StakingTransactorSession) InitiatePartialWithdrawal(amount *big.Int) (*types.Transaction, error) {
	return _Staking.Contract.InitiatePartialWithdrawal(&_Staking.TransactOpts, amount)
}

// NewDeposit is a paid mutator transaction binding the contract method 0x731f750d.
//
// Solidity: function newDeposit(address validatorAddress) payable returns()
func (_Staking *StakingTransactor) NewDeposit(opts *bind.TransactOpts, validatorAddress common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "newDeposit", validatorAddress)
}

// NewDeposit is a paid mutator transaction binding the contract method 0x731f750d.
//
// Solidity: function newDeposit(address validatorAddress) payable returns()
func (_Staking *StakingSession) NewDeposit(validatorAddress common.Address) (*types.Transaction, error) {
	return _Staking.Contract.NewDeposit(&_Staking.TransactOpts, validatorAddress)
}

// NewDeposit is a paid mutator transaction binding the contract method 0x731f750d.
//
// Solidity: function newDeposit(address validatorAddress) payable returns()
func (_Staking *StakingTransactorSession) NewDeposit(validatorAddress common.Address) (*types.Transaction, error) {
	return _Staking.Contract.NewDeposit(&_Staking.TransactOpts, validatorAddress)
}

// PauseValidation is a paid mutator transaction binding the contract method 0xc97ab777.
//
// Solidity: function pauseValidation() returns()
func (_Staking *StakingTransactor) PauseValidation(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "pauseValidation")
}

// PauseValidation is a paid mutator transaction binding the contract method 0xc97ab777.
//
// Solidity: function pauseValidation() returns()
func (_Staking *StakingSession) PauseValidation() (*types.Transaction, error) {
	return _Staking.Contract.PauseValidation(&_Staking.TransactOpts)
}

// PauseValidation is a paid mutator transaction binding the contract method 0xc97ab777.
//
// Solidity: function pauseValidation() returns()
func (_Staking *StakingTransactorSession) PauseValidation() (*types.Transaction, error) {
	return _Staking.Contract.PauseValidation(&_Staking.TransactOpts)
}

// ResetNilBlock is a paid mutator transaction binding the contract method 0x7f3ea08e.
//
// Solidity: function resetNilBlock(address validatorAddress) returns()
func (_Staking *StakingTransactor) ResetNilBlock(opts *bind.TransactOpts, validatorAddress common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "resetNilBlock", validatorAddress)
}

// ResetNilBlock is a paid mutator transaction binding the contract method 0x7f3ea08e.
//
// Solidity: function resetNilBlock(address validatorAddress) returns()
func (_Staking *StakingSession) ResetNilBlock(validatorAddress common.Address) (*types.Transaction, error) {
	return _Staking.Contract.ResetNilBlock(&_Staking.TransactOpts, validatorAddress)
}

// ResetNilBlock is a paid mutator transaction binding the contract method 0x7f3ea08e.
//
// Solidity: function resetNilBlock(address validatorAddress) returns()
func (_Staking *StakingTransactorSession) ResetNilBlock(validatorAddress common.Address) (*types.Transaction, error) {
	return _Staking.Contract.ResetNilBlock(&_Staking.TransactOpts, validatorAddress)
}

// ResumeValidation is a paid mutator transaction binding the contract method 0x6e7f5bd3.
//
// Solidity: function resumeValidation() returns()
func (_Staking *StakingTransactor) ResumeValidation(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "resumeValidation")
}

// ResumeValidation is a paid mutator transaction binding the contract method 0x6e7f5bd3.
//
// Solidity: function resumeValidation() returns()
func (_Staking *StakingSession) ResumeValidation() (*types.Transaction, error) {
	return _Staking.Contract.ResumeValidation(&_Staking.TransactOpts)
}

// ResumeValidation is a paid mutator transaction binding the contract method 0x6e7f5bd3.
//
// Solidity: function resumeValidation() returns()
func (_Staking *StakingTransactorSession) ResumeValidation() (*types.Transaction, error) {
	return _Staking.Contract.ResumeValidation(&_Staking.TransactOpts)
}

// SetNilBlock is a paid mutator transaction binding the contract method 0xe71b5f36.
//
// Solidity: function setNilBlock(address validatorAddress) returns()
func (_Staking *StakingTransactor) SetNilBlock(opts *bind.TransactOpts, validatorAddress common.Address) (*types.Transaction, error) {
	return _Staking.contract.Transact(opts, "setNilBlock", validatorAddress)
}

// SetNilBlock is a paid mutator transaction binding the contract method 0xe71b5f36.
//
// Solidity: function setNilBlock(address validatorAddress) returns()
func (_Staking *StakingSession) SetNilBlock(validatorAddress common.Address) (*types.Transaction, error) {
	return _Staking.Contract.SetNilBlock(&_Staking.TransactOpts, validatorAddress)
}

// SetNilBlock is a paid mutator transaction binding the contract method 0xe71b5f36.
//
// Solidity: function setNilBlock(address validatorAddress) returns()
func (_Staking *StakingTransactorSession) SetNilBlock(validatorAddress common.Address) (*types.Transaction, error) {
	return _Staking.Contract.SetNilBlock(&_Staking.TransactOpts, validatorAddress)
}

// StakingOnChangeValidatorIterator is returned from FilterOnChangeValidator and is used to iterate over the raw logs and unpacked data for OnChangeValidator events raised by the Staking contract.
type StakingOnChangeValidatorIterator struct {
	Event *StakingOnChangeValidator // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingOnChangeValidatorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingOnChangeValidator)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingOnChangeValidator)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingOnChangeValidatorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingOnChangeValidatorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingOnChangeValidator represents a OnChangeValidator event raised by the Staking contract.
type StakingOnChangeValidator struct {
	DepositorAddress    common.Address
	OldValidatorAddress common.Address
	NewValidatorAddress common.Address
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterOnChangeValidator is a free log retrieval operation binding the contract event 0x66d7a4dea74851a2dcc039f4c17dd2862081083c29daceb1a9346783de9185ce.
//
// Solidity: event OnChangeValidator(address indexed depositorAddress, address indexed oldValidatorAddress, address indexed newValidatorAddress)
func (_Staking *StakingFilterer) FilterOnChangeValidator(opts *bind.FilterOpts, depositorAddress []common.Address, oldValidatorAddress []common.Address, newValidatorAddress []common.Address) (*StakingOnChangeValidatorIterator, error) {

	var depositorAddressRule []interface{}
	for _, depositorAddressItem := range depositorAddress {
		depositorAddressRule = append(depositorAddressRule, depositorAddressItem)
	}
	var oldValidatorAddressRule []interface{}
	for _, oldValidatorAddressItem := range oldValidatorAddress {
		oldValidatorAddressRule = append(oldValidatorAddressRule, oldValidatorAddressItem)
	}
	var newValidatorAddressRule []interface{}
	for _, newValidatorAddressItem := range newValidatorAddress {
		newValidatorAddressRule = append(newValidatorAddressRule, newValidatorAddressItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "OnChangeValidator", depositorAddressRule, oldValidatorAddressRule, newValidatorAddressRule)
	if err != nil {
		return nil, err
	}
	return &StakingOnChangeValidatorIterator{contract: _Staking.contract, event: "OnChangeValidator", logs: logs, sub: sub}, nil
}

// WatchOnChangeValidator is a free log subscription operation binding the contract event 0x66d7a4dea74851a2dcc039f4c17dd2862081083c29daceb1a9346783de9185ce.
//
// Solidity: event OnChangeValidator(address indexed depositorAddress, address indexed oldValidatorAddress, address indexed newValidatorAddress)
func (_Staking *StakingFilterer) WatchOnChangeValidator(opts *bind.WatchOpts, sink chan<- *StakingOnChangeValidator, depositorAddress []common.Address, oldValidatorAddress []common.Address, newValidatorAddress []common.Address) (event.Subscription, error) {

	var depositorAddressRule []interface{}
	for _, depositorAddressItem := range depositorAddress {
		depositorAddressRule = append(depositorAddressRule, depositorAddressItem)
	}
	var oldValidatorAddressRule []interface{}
	for _, oldValidatorAddressItem := range oldValidatorAddress {
		oldValidatorAddressRule = append(oldValidatorAddressRule, oldValidatorAddressItem)
	}
	var newValidatorAddressRule []interface{}
	for _, newValidatorAddressItem := range newValidatorAddress {
		newValidatorAddressRule = append(newValidatorAddressRule, newValidatorAddressItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "OnChangeValidator", depositorAddressRule, oldValidatorAddressRule, newValidatorAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingOnChangeValidator)
				if err := _Staking.contract.UnpackLog(event, "OnChangeValidator", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOnChangeValidator is a log parse operation binding the contract event 0x66d7a4dea74851a2dcc039f4c17dd2862081083c29daceb1a9346783de9185ce.
//
// Solidity: event OnChangeValidator(address indexed depositorAddress, address indexed oldValidatorAddress, address indexed newValidatorAddress)
func (_Staking *StakingFilterer) ParseOnChangeValidator(log types.Log) (*StakingOnChangeValidator, error) {
	event := new(StakingOnChangeValidator)
	if err := _Staking.contract.UnpackLog(event, "OnChangeValidator", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingOnCompleteChangeDepositorIterator is returned from FilterOnCompleteChangeDepositor and is used to iterate over the raw logs and unpacked data for OnCompleteChangeDepositor events raised by the Staking contract.
type StakingOnCompleteChangeDepositorIterator struct {
	Event *StakingOnCompleteChangeDepositor // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingOnCompleteChangeDepositorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingOnCompleteChangeDepositor)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingOnCompleteChangeDepositor)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingOnCompleteChangeDepositorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingOnCompleteChangeDepositorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingOnCompleteChangeDepositor represents a OnCompleteChangeDepositor event raised by the Staking contract.
type StakingOnCompleteChangeDepositor struct {
	OldDepositorAddress common.Address
	NewDepositorAddress common.Address
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterOnCompleteChangeDepositor is a free log retrieval operation binding the contract event 0x63a0b91bae35976a3f841c37be566954755732e73caf9218f3e0437e91e4e8c0.
//
// Solidity: event OnCompleteChangeDepositor(address indexed oldDepositorAddress, address indexed newDepositorAddress)
func (_Staking *StakingFilterer) FilterOnCompleteChangeDepositor(opts *bind.FilterOpts, oldDepositorAddress []common.Address, newDepositorAddress []common.Address) (*StakingOnCompleteChangeDepositorIterator, error) {

	var oldDepositorAddressRule []interface{}
	for _, oldDepositorAddressItem := range oldDepositorAddress {
		oldDepositorAddressRule = append(oldDepositorAddressRule, oldDepositorAddressItem)
	}
	var newDepositorAddressRule []interface{}
	for _, newDepositorAddressItem := range newDepositorAddress {
		newDepositorAddressRule = append(newDepositorAddressRule, newDepositorAddressItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "OnCompleteChangeDepositor", oldDepositorAddressRule, newDepositorAddressRule)
	if err != nil {
		return nil, err
	}
	return &StakingOnCompleteChangeDepositorIterator{contract: _Staking.contract, event: "OnCompleteChangeDepositor", logs: logs, sub: sub}, nil
}

// WatchOnCompleteChangeDepositor is a free log subscription operation binding the contract event 0x63a0b91bae35976a3f841c37be566954755732e73caf9218f3e0437e91e4e8c0.
//
// Solidity: event OnCompleteChangeDepositor(address indexed oldDepositorAddress, address indexed newDepositorAddress)
func (_Staking *StakingFilterer) WatchOnCompleteChangeDepositor(opts *bind.WatchOpts, sink chan<- *StakingOnCompleteChangeDepositor, oldDepositorAddress []common.Address, newDepositorAddress []common.Address) (event.Subscription, error) {

	var oldDepositorAddressRule []interface{}
	for _, oldDepositorAddressItem := range oldDepositorAddress {
		oldDepositorAddressRule = append(oldDepositorAddressRule, oldDepositorAddressItem)
	}
	var newDepositorAddressRule []interface{}
	for _, newDepositorAddressItem := range newDepositorAddress {
		newDepositorAddressRule = append(newDepositorAddressRule, newDepositorAddressItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "OnCompleteChangeDepositor", oldDepositorAddressRule, newDepositorAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingOnCompleteChangeDepositor)
				if err := _Staking.contract.UnpackLog(event, "OnCompleteChangeDepositor", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOnCompleteChangeDepositor is a log parse operation binding the contract event 0x63a0b91bae35976a3f841c37be566954755732e73caf9218f3e0437e91e4e8c0.
//
// Solidity: event OnCompleteChangeDepositor(address indexed oldDepositorAddress, address indexed newDepositorAddress)
func (_Staking *StakingFilterer) ParseOnCompleteChangeDepositor(log types.Log) (*StakingOnCompleteChangeDepositor, error) {
	event := new(StakingOnCompleteChangeDepositor)
	if err := _Staking.contract.UnpackLog(event, "OnCompleteChangeDepositor", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingOnCompletePartialWithdrawalIterator is returned from FilterOnCompletePartialWithdrawal and is used to iterate over the raw logs and unpacked data for OnCompletePartialWithdrawal events raised by the Staking contract.
type StakingOnCompletePartialWithdrawalIterator struct {
	Event *StakingOnCompletePartialWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingOnCompletePartialWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingOnCompletePartialWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingOnCompletePartialWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingOnCompletePartialWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingOnCompletePartialWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingOnCompletePartialWithdrawal represents a OnCompletePartialWithdrawal event raised by the Staking contract.
type StakingOnCompletePartialWithdrawal struct {
	DepositorAddress   common.Address
	WithdrawalQuantity *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterOnCompletePartialWithdrawal is a free log retrieval operation binding the contract event 0x811d94e3e045018ad7c40086eac16cbc3aba880fde68d039f9e8959e47627ffc.
//
// Solidity: event OnCompletePartialWithdrawal(address indexed depositorAddress, uint256 withdrawalQuantity)
func (_Staking *StakingFilterer) FilterOnCompletePartialWithdrawal(opts *bind.FilterOpts, depositorAddress []common.Address) (*StakingOnCompletePartialWithdrawalIterator, error) {

	var depositorAddressRule []interface{}
	for _, depositorAddressItem := range depositorAddress {
		depositorAddressRule = append(depositorAddressRule, depositorAddressItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "OnCompletePartialWithdrawal", depositorAddressRule)
	if err != nil {
		return nil, err
	}
	return &StakingOnCompletePartialWithdrawalIterator{contract: _Staking.contract, event: "OnCompletePartialWithdrawal", logs: logs, sub: sub}, nil
}

// WatchOnCompletePartialWithdrawal is a free log subscription operation binding the contract event 0x811d94e3e045018ad7c40086eac16cbc3aba880fde68d039f9e8959e47627ffc.
//
// Solidity: event OnCompletePartialWithdrawal(address indexed depositorAddress, uint256 withdrawalQuantity)
func (_Staking *StakingFilterer) WatchOnCompletePartialWithdrawal(opts *bind.WatchOpts, sink chan<- *StakingOnCompletePartialWithdrawal, depositorAddress []common.Address) (event.Subscription, error) {

	var depositorAddressRule []interface{}
	for _, depositorAddressItem := range depositorAddress {
		depositorAddressRule = append(depositorAddressRule, depositorAddressItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "OnCompletePartialWithdrawal", depositorAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingOnCompletePartialWithdrawal)
				if err := _Staking.contract.UnpackLog(event, "OnCompletePartialWithdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOnCompletePartialWithdrawal is a log parse operation binding the contract event 0x811d94e3e045018ad7c40086eac16cbc3aba880fde68d039f9e8959e47627ffc.
//
// Solidity: event OnCompletePartialWithdrawal(address indexed depositorAddress, uint256 withdrawalQuantity)
func (_Staking *StakingFilterer) ParseOnCompletePartialWithdrawal(log types.Log) (*StakingOnCompletePartialWithdrawal, error) {
	event := new(StakingOnCompletePartialWithdrawal)
	if err := _Staking.contract.UnpackLog(event, "OnCompletePartialWithdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingOnCompleteWithdrawalIterator is returned from FilterOnCompleteWithdrawal and is used to iterate over the raw logs and unpacked data for OnCompleteWithdrawal events raised by the Staking contract.
type StakingOnCompleteWithdrawalIterator struct {
	Event *StakingOnCompleteWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingOnCompleteWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingOnCompleteWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingOnCompleteWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingOnCompleteWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingOnCompleteWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingOnCompleteWithdrawal represents a OnCompleteWithdrawal event raised by the Staking contract.
type StakingOnCompleteWithdrawal struct {
	DepositorAddress common.Address
	NetBalance       *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterOnCompleteWithdrawal is a free log retrieval operation binding the contract event 0x3b7625df2fe98121022a93d8d1c02ff11f383651160f046ffc4c1e379d4242ef.
//
// Solidity: event OnCompleteWithdrawal(address depositorAddress, uint256 netBalance)
func (_Staking *StakingFilterer) FilterOnCompleteWithdrawal(opts *bind.FilterOpts) (*StakingOnCompleteWithdrawalIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "OnCompleteWithdrawal")
	if err != nil {
		return nil, err
	}
	return &StakingOnCompleteWithdrawalIterator{contract: _Staking.contract, event: "OnCompleteWithdrawal", logs: logs, sub: sub}, nil
}

// WatchOnCompleteWithdrawal is a free log subscription operation binding the contract event 0x3b7625df2fe98121022a93d8d1c02ff11f383651160f046ffc4c1e379d4242ef.
//
// Solidity: event OnCompleteWithdrawal(address depositorAddress, uint256 netBalance)
func (_Staking *StakingFilterer) WatchOnCompleteWithdrawal(opts *bind.WatchOpts, sink chan<- *StakingOnCompleteWithdrawal) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "OnCompleteWithdrawal")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingOnCompleteWithdrawal)
				if err := _Staking.contract.UnpackLog(event, "OnCompleteWithdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOnCompleteWithdrawal is a log parse operation binding the contract event 0x3b7625df2fe98121022a93d8d1c02ff11f383651160f046ffc4c1e379d4242ef.
//
// Solidity: event OnCompleteWithdrawal(address depositorAddress, uint256 netBalance)
func (_Staking *StakingFilterer) ParseOnCompleteWithdrawal(log types.Log) (*StakingOnCompleteWithdrawal, error) {
	event := new(StakingOnCompleteWithdrawal)
	if err := _Staking.contract.UnpackLog(event, "OnCompleteWithdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingOnIncreaseDepositIterator is returned from FilterOnIncreaseDeposit and is used to iterate over the raw logs and unpacked data for OnIncreaseDeposit events raised by the Staking contract.
type StakingOnIncreaseDepositIterator struct {
	Event *StakingOnIncreaseDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingOnIncreaseDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingOnIncreaseDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingOnIncreaseDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingOnIncreaseDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingOnIncreaseDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingOnIncreaseDeposit represents a OnIncreaseDeposit event raised by the Staking contract.
type StakingOnIncreaseDeposit struct {
	DepositorAddress common.Address
	OldBalance       *big.Int
	NewBalance       *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterOnIncreaseDeposit is a free log retrieval operation binding the contract event 0x100ee5ea682278682fae4feef707cb427ce6e5cb3d9faea88c450ed817ec2f3f.
//
// Solidity: event OnIncreaseDeposit(address indexed depositorAddress, uint256 oldBalance, uint256 newBalance)
func (_Staking *StakingFilterer) FilterOnIncreaseDeposit(opts *bind.FilterOpts, depositorAddress []common.Address) (*StakingOnIncreaseDepositIterator, error) {

	var depositorAddressRule []interface{}
	for _, depositorAddressItem := range depositorAddress {
		depositorAddressRule = append(depositorAddressRule, depositorAddressItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "OnIncreaseDeposit", depositorAddressRule)
	if err != nil {
		return nil, err
	}
	return &StakingOnIncreaseDepositIterator{contract: _Staking.contract, event: "OnIncreaseDeposit", logs: logs, sub: sub}, nil
}

// WatchOnIncreaseDeposit is a free log subscription operation binding the contract event 0x100ee5ea682278682fae4feef707cb427ce6e5cb3d9faea88c450ed817ec2f3f.
//
// Solidity: event OnIncreaseDeposit(address indexed depositorAddress, uint256 oldBalance, uint256 newBalance)
func (_Staking *StakingFilterer) WatchOnIncreaseDeposit(opts *bind.WatchOpts, sink chan<- *StakingOnIncreaseDeposit, depositorAddress []common.Address) (event.Subscription, error) {

	var depositorAddressRule []interface{}
	for _, depositorAddressItem := range depositorAddress {
		depositorAddressRule = append(depositorAddressRule, depositorAddressItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "OnIncreaseDeposit", depositorAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingOnIncreaseDeposit)
				if err := _Staking.contract.UnpackLog(event, "OnIncreaseDeposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOnIncreaseDeposit is a log parse operation binding the contract event 0x100ee5ea682278682fae4feef707cb427ce6e5cb3d9faea88c450ed817ec2f3f.
//
// Solidity: event OnIncreaseDeposit(address indexed depositorAddress, uint256 oldBalance, uint256 newBalance)
func (_Staking *StakingFilterer) ParseOnIncreaseDeposit(log types.Log) (*StakingOnIncreaseDeposit, error) {
	event := new(StakingOnIncreaseDeposit)
	if err := _Staking.contract.UnpackLog(event, "OnIncreaseDeposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingOnInitiateChangeDepositorIterator is returned from FilterOnInitiateChangeDepositor and is used to iterate over the raw logs and unpacked data for OnInitiateChangeDepositor events raised by the Staking contract.
type StakingOnInitiateChangeDepositorIterator struct {
	Event *StakingOnInitiateChangeDepositor // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingOnInitiateChangeDepositorIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingOnInitiateChangeDepositor)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingOnInitiateChangeDepositor)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingOnInitiateChangeDepositorIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingOnInitiateChangeDepositorIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingOnInitiateChangeDepositor represents a OnInitiateChangeDepositor event raised by the Staking contract.
type StakingOnInitiateChangeDepositor struct {
	OldDepositorAddress common.Address
	NewDepositorAddress common.Address
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterOnInitiateChangeDepositor is a free log retrieval operation binding the contract event 0x91b5192e42d841a3a4117caf5b27e67f47f4ebc9a1be85c4e0e4e17517f5e9f8.
//
// Solidity: event OnInitiateChangeDepositor(address indexed oldDepositorAddress, address indexed newDepositorAddress)
func (_Staking *StakingFilterer) FilterOnInitiateChangeDepositor(opts *bind.FilterOpts, oldDepositorAddress []common.Address, newDepositorAddress []common.Address) (*StakingOnInitiateChangeDepositorIterator, error) {

	var oldDepositorAddressRule []interface{}
	for _, oldDepositorAddressItem := range oldDepositorAddress {
		oldDepositorAddressRule = append(oldDepositorAddressRule, oldDepositorAddressItem)
	}
	var newDepositorAddressRule []interface{}
	for _, newDepositorAddressItem := range newDepositorAddress {
		newDepositorAddressRule = append(newDepositorAddressRule, newDepositorAddressItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "OnInitiateChangeDepositor", oldDepositorAddressRule, newDepositorAddressRule)
	if err != nil {
		return nil, err
	}
	return &StakingOnInitiateChangeDepositorIterator{contract: _Staking.contract, event: "OnInitiateChangeDepositor", logs: logs, sub: sub}, nil
}

// WatchOnInitiateChangeDepositor is a free log subscription operation binding the contract event 0x91b5192e42d841a3a4117caf5b27e67f47f4ebc9a1be85c4e0e4e17517f5e9f8.
//
// Solidity: event OnInitiateChangeDepositor(address indexed oldDepositorAddress, address indexed newDepositorAddress)
func (_Staking *StakingFilterer) WatchOnInitiateChangeDepositor(opts *bind.WatchOpts, sink chan<- *StakingOnInitiateChangeDepositor, oldDepositorAddress []common.Address, newDepositorAddress []common.Address) (event.Subscription, error) {

	var oldDepositorAddressRule []interface{}
	for _, oldDepositorAddressItem := range oldDepositorAddress {
		oldDepositorAddressRule = append(oldDepositorAddressRule, oldDepositorAddressItem)
	}
	var newDepositorAddressRule []interface{}
	for _, newDepositorAddressItem := range newDepositorAddress {
		newDepositorAddressRule = append(newDepositorAddressRule, newDepositorAddressItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "OnInitiateChangeDepositor", oldDepositorAddressRule, newDepositorAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingOnInitiateChangeDepositor)
				if err := _Staking.contract.UnpackLog(event, "OnInitiateChangeDepositor", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOnInitiateChangeDepositor is a log parse operation binding the contract event 0x91b5192e42d841a3a4117caf5b27e67f47f4ebc9a1be85c4e0e4e17517f5e9f8.
//
// Solidity: event OnInitiateChangeDepositor(address indexed oldDepositorAddress, address indexed newDepositorAddress)
func (_Staking *StakingFilterer) ParseOnInitiateChangeDepositor(log types.Log) (*StakingOnInitiateChangeDepositor, error) {
	event := new(StakingOnInitiateChangeDepositor)
	if err := _Staking.contract.UnpackLog(event, "OnInitiateChangeDepositor", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingOnInitiatePartialWithdrawalIterator is returned from FilterOnInitiatePartialWithdrawal and is used to iterate over the raw logs and unpacked data for OnInitiatePartialWithdrawal events raised by the Staking contract.
type StakingOnInitiatePartialWithdrawalIterator struct {
	Event *StakingOnInitiatePartialWithdrawal // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingOnInitiatePartialWithdrawalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingOnInitiatePartialWithdrawal)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingOnInitiatePartialWithdrawal)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingOnInitiatePartialWithdrawalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingOnInitiatePartialWithdrawalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingOnInitiatePartialWithdrawal represents a OnInitiatePartialWithdrawal event raised by the Staking contract.
type StakingOnInitiatePartialWithdrawal struct {
	DepositorAddress   common.Address
	WithdrawalBlock    *big.Int
	WithdrawalQuantity *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterOnInitiatePartialWithdrawal is a free log retrieval operation binding the contract event 0xbf27d00e9d952159a2c9d4b5baf1fc8e9c9ed005e92093815cce4c40521357ce.
//
// Solidity: event OnInitiatePartialWithdrawal(address indexed depositorAddress, uint256 withdrawalBlock, uint256 withdrawalQuantity)
func (_Staking *StakingFilterer) FilterOnInitiatePartialWithdrawal(opts *bind.FilterOpts, depositorAddress []common.Address) (*StakingOnInitiatePartialWithdrawalIterator, error) {

	var depositorAddressRule []interface{}
	for _, depositorAddressItem := range depositorAddress {
		depositorAddressRule = append(depositorAddressRule, depositorAddressItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "OnInitiatePartialWithdrawal", depositorAddressRule)
	if err != nil {
		return nil, err
	}
	return &StakingOnInitiatePartialWithdrawalIterator{contract: _Staking.contract, event: "OnInitiatePartialWithdrawal", logs: logs, sub: sub}, nil
}

// WatchOnInitiatePartialWithdrawal is a free log subscription operation binding the contract event 0xbf27d00e9d952159a2c9d4b5baf1fc8e9c9ed005e92093815cce4c40521357ce.
//
// Solidity: event OnInitiatePartialWithdrawal(address indexed depositorAddress, uint256 withdrawalBlock, uint256 withdrawalQuantity)
func (_Staking *StakingFilterer) WatchOnInitiatePartialWithdrawal(opts *bind.WatchOpts, sink chan<- *StakingOnInitiatePartialWithdrawal, depositorAddress []common.Address) (event.Subscription, error) {

	var depositorAddressRule []interface{}
	for _, depositorAddressItem := range depositorAddress {
		depositorAddressRule = append(depositorAddressRule, depositorAddressItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "OnInitiatePartialWithdrawal", depositorAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingOnInitiatePartialWithdrawal)
				if err := _Staking.contract.UnpackLog(event, "OnInitiatePartialWithdrawal", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOnInitiatePartialWithdrawal is a log parse operation binding the contract event 0xbf27d00e9d952159a2c9d4b5baf1fc8e9c9ed005e92093815cce4c40521357ce.
//
// Solidity: event OnInitiatePartialWithdrawal(address indexed depositorAddress, uint256 withdrawalBlock, uint256 withdrawalQuantity)
func (_Staking *StakingFilterer) ParseOnInitiatePartialWithdrawal(log types.Log) (*StakingOnInitiatePartialWithdrawal, error) {
	event := new(StakingOnInitiatePartialWithdrawal)
	if err := _Staking.contract.UnpackLog(event, "OnInitiatePartialWithdrawal", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingOnNewDepositIterator is returned from FilterOnNewDeposit and is used to iterate over the raw logs and unpacked data for OnNewDeposit events raised by the Staking contract.
type StakingOnNewDepositIterator struct {
	Event *StakingOnNewDeposit // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingOnNewDepositIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingOnNewDeposit)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingOnNewDeposit)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingOnNewDepositIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingOnNewDepositIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingOnNewDeposit represents a OnNewDeposit event raised by the Staking contract.
type StakingOnNewDeposit struct {
	DepositorAddress common.Address
	ValidatorAddress common.Address
	Amount           *big.Int
	BlockNumber      *big.Int
	BlockTime        *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterOnNewDeposit is a free log retrieval operation binding the contract event 0xbe02029a5af0c964ebee7370f030cf18a026aae3a5d66f8107aee23f226d9ada.
//
// Solidity: event OnNewDeposit(address indexed depositorAddress, address indexed validatorAddress, uint256 amount, uint256 blockNumber, uint256 blockTime)
func (_Staking *StakingFilterer) FilterOnNewDeposit(opts *bind.FilterOpts, depositorAddress []common.Address, validatorAddress []common.Address) (*StakingOnNewDepositIterator, error) {

	var depositorAddressRule []interface{}
	for _, depositorAddressItem := range depositorAddress {
		depositorAddressRule = append(depositorAddressRule, depositorAddressItem)
	}
	var validatorAddressRule []interface{}
	for _, validatorAddressItem := range validatorAddress {
		validatorAddressRule = append(validatorAddressRule, validatorAddressItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "OnNewDeposit", depositorAddressRule, validatorAddressRule)
	if err != nil {
		return nil, err
	}
	return &StakingOnNewDepositIterator{contract: _Staking.contract, event: "OnNewDeposit", logs: logs, sub: sub}, nil
}

// WatchOnNewDeposit is a free log subscription operation binding the contract event 0xbe02029a5af0c964ebee7370f030cf18a026aae3a5d66f8107aee23f226d9ada.
//
// Solidity: event OnNewDeposit(address indexed depositorAddress, address indexed validatorAddress, uint256 amount, uint256 blockNumber, uint256 blockTime)
func (_Staking *StakingFilterer) WatchOnNewDeposit(opts *bind.WatchOpts, sink chan<- *StakingOnNewDeposit, depositorAddress []common.Address, validatorAddress []common.Address) (event.Subscription, error) {

	var depositorAddressRule []interface{}
	for _, depositorAddressItem := range depositorAddress {
		depositorAddressRule = append(depositorAddressRule, depositorAddressItem)
	}
	var validatorAddressRule []interface{}
	for _, validatorAddressItem := range validatorAddress {
		validatorAddressRule = append(validatorAddressRule, validatorAddressItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "OnNewDeposit", depositorAddressRule, validatorAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingOnNewDeposit)
				if err := _Staking.contract.UnpackLog(event, "OnNewDeposit", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOnNewDeposit is a log parse operation binding the contract event 0xbe02029a5af0c964ebee7370f030cf18a026aae3a5d66f8107aee23f226d9ada.
//
// Solidity: event OnNewDeposit(address indexed depositorAddress, address indexed validatorAddress, uint256 amount, uint256 blockNumber, uint256 blockTime)
func (_Staking *StakingFilterer) ParseOnNewDeposit(log types.Log) (*StakingOnNewDeposit, error) {
	event := new(StakingOnNewDeposit)
	if err := _Staking.contract.UnpackLog(event, "OnNewDeposit", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingOnPauseValidationIterator is returned from FilterOnPauseValidation and is used to iterate over the raw logs and unpacked data for OnPauseValidation events raised by the Staking contract.
type StakingOnPauseValidationIterator struct {
	Event *StakingOnPauseValidation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingOnPauseValidationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingOnPauseValidation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingOnPauseValidation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingOnPauseValidationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingOnPauseValidationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingOnPauseValidation represents a OnPauseValidation event raised by the Staking contract.
type StakingOnPauseValidation struct {
	DepositorAddress common.Address
	ValidatorAddress common.Address
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterOnPauseValidation is a free log retrieval operation binding the contract event 0x805619aaa3e6ed885faf94910ba4a75ca1ca3b3e0c539f6dd93b4d1e48b67826.
//
// Solidity: event OnPauseValidation(address depositorAddress, address validatorAddress)
func (_Staking *StakingFilterer) FilterOnPauseValidation(opts *bind.FilterOpts) (*StakingOnPauseValidationIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "OnPauseValidation")
	if err != nil {
		return nil, err
	}
	return &StakingOnPauseValidationIterator{contract: _Staking.contract, event: "OnPauseValidation", logs: logs, sub: sub}, nil
}

// WatchOnPauseValidation is a free log subscription operation binding the contract event 0x805619aaa3e6ed885faf94910ba4a75ca1ca3b3e0c539f6dd93b4d1e48b67826.
//
// Solidity: event OnPauseValidation(address depositorAddress, address validatorAddress)
func (_Staking *StakingFilterer) WatchOnPauseValidation(opts *bind.WatchOpts, sink chan<- *StakingOnPauseValidation) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "OnPauseValidation")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingOnPauseValidation)
				if err := _Staking.contract.UnpackLog(event, "OnPauseValidation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOnPauseValidation is a log parse operation binding the contract event 0x805619aaa3e6ed885faf94910ba4a75ca1ca3b3e0c539f6dd93b4d1e48b67826.
//
// Solidity: event OnPauseValidation(address depositorAddress, address validatorAddress)
func (_Staking *StakingFilterer) ParseOnPauseValidation(log types.Log) (*StakingOnPauseValidation, error) {
	event := new(StakingOnPauseValidation)
	if err := _Staking.contract.UnpackLog(event, "OnPauseValidation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingOnResumeValidationIterator is returned from FilterOnResumeValidation and is used to iterate over the raw logs and unpacked data for OnResumeValidation events raised by the Staking contract.
type StakingOnResumeValidationIterator struct {
	Event *StakingOnResumeValidation // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingOnResumeValidationIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingOnResumeValidation)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingOnResumeValidation)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingOnResumeValidationIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingOnResumeValidationIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingOnResumeValidation represents a OnResumeValidation event raised by the Staking contract.
type StakingOnResumeValidation struct {
	DepositorAddress common.Address
	ValidatorAddress common.Address
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterOnResumeValidation is a free log retrieval operation binding the contract event 0x94b4f7e95a6cbc76e8ee615e2921a9f77aba94b68b52301f22a5844b433daadb.
//
// Solidity: event OnResumeValidation(address depositorAddress, address validatorAddress)
func (_Staking *StakingFilterer) FilterOnResumeValidation(opts *bind.FilterOpts) (*StakingOnResumeValidationIterator, error) {

	logs, sub, err := _Staking.contract.FilterLogs(opts, "OnResumeValidation")
	if err != nil {
		return nil, err
	}
	return &StakingOnResumeValidationIterator{contract: _Staking.contract, event: "OnResumeValidation", logs: logs, sub: sub}, nil
}

// WatchOnResumeValidation is a free log subscription operation binding the contract event 0x94b4f7e95a6cbc76e8ee615e2921a9f77aba94b68b52301f22a5844b433daadb.
//
// Solidity: event OnResumeValidation(address depositorAddress, address validatorAddress)
func (_Staking *StakingFilterer) WatchOnResumeValidation(opts *bind.WatchOpts, sink chan<- *StakingOnResumeValidation) (event.Subscription, error) {

	logs, sub, err := _Staking.contract.WatchLogs(opts, "OnResumeValidation")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingOnResumeValidation)
				if err := _Staking.contract.UnpackLog(event, "OnResumeValidation", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOnResumeValidation is a log parse operation binding the contract event 0x94b4f7e95a6cbc76e8ee615e2921a9f77aba94b68b52301f22a5844b433daadb.
//
// Solidity: event OnResumeValidation(address depositorAddress, address validatorAddress)
func (_Staking *StakingFilterer) ParseOnResumeValidation(log types.Log) (*StakingOnResumeValidation, error) {
	event := new(StakingOnResumeValidation)
	if err := _Staking.contract.UnpackLog(event, "OnResumeValidation", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingOnRewardIterator is returned from FilterOnReward and is used to iterate over the raw logs and unpacked data for OnReward events raised by the Staking contract.
type StakingOnRewardIterator struct {
	Event *StakingOnReward // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingOnRewardIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingOnReward)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingOnReward)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingOnRewardIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingOnRewardIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingOnReward represents a OnReward event raised by the Staking contract.
type StakingOnReward struct {
	DepositorAddress common.Address
	RewardAmount     *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterOnReward is a free log retrieval operation binding the contract event 0xd1072bb52c3131d0c96197b73fb8a45637e30f8b6664fc142310cc9b242859b4.
//
// Solidity: event OnReward(address indexed depositorAddress, uint256 rewardAmount)
func (_Staking *StakingFilterer) FilterOnReward(opts *bind.FilterOpts, depositorAddress []common.Address) (*StakingOnRewardIterator, error) {

	var depositorAddressRule []interface{}
	for _, depositorAddressItem := range depositorAddress {
		depositorAddressRule = append(depositorAddressRule, depositorAddressItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "OnReward", depositorAddressRule)
	if err != nil {
		return nil, err
	}
	return &StakingOnRewardIterator{contract: _Staking.contract, event: "OnReward", logs: logs, sub: sub}, nil
}

// WatchOnReward is a free log subscription operation binding the contract event 0xd1072bb52c3131d0c96197b73fb8a45637e30f8b6664fc142310cc9b242859b4.
//
// Solidity: event OnReward(address indexed depositorAddress, uint256 rewardAmount)
func (_Staking *StakingFilterer) WatchOnReward(opts *bind.WatchOpts, sink chan<- *StakingOnReward, depositorAddress []common.Address) (event.Subscription, error) {

	var depositorAddressRule []interface{}
	for _, depositorAddressItem := range depositorAddress {
		depositorAddressRule = append(depositorAddressRule, depositorAddressItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "OnReward", depositorAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingOnReward)
				if err := _Staking.contract.UnpackLog(event, "OnReward", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOnReward is a log parse operation binding the contract event 0xd1072bb52c3131d0c96197b73fb8a45637e30f8b6664fc142310cc9b242859b4.
//
// Solidity: event OnReward(address indexed depositorAddress, uint256 rewardAmount)
func (_Staking *StakingFilterer) ParseOnReward(log types.Log) (*StakingOnReward, error) {
	event := new(StakingOnReward)
	if err := _Staking.contract.UnpackLog(event, "OnReward", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// StakingOnSlashingIterator is returned from FilterOnSlashing and is used to iterate over the raw logs and unpacked data for OnSlashing events raised by the Staking contract.
type StakingOnSlashingIterator struct {
	Event *StakingOnSlashing // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *StakingOnSlashingIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(StakingOnSlashing)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(StakingOnSlashing)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *StakingOnSlashingIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *StakingOnSlashingIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// StakingOnSlashing represents a OnSlashing event raised by the Staking contract.
type StakingOnSlashing struct {
	DepositorAddress common.Address
	SlashedAmount    *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterOnSlashing is a free log retrieval operation binding the contract event 0xcadc6c149d7c30ba433e0a526c9f018a1c4dc5b32099790e4dd9d78a93021810.
//
// Solidity: event OnSlashing(address indexed depositorAddress, uint256 slashedAmount)
func (_Staking *StakingFilterer) FilterOnSlashing(opts *bind.FilterOpts, depositorAddress []common.Address) (*StakingOnSlashingIterator, error) {

	var depositorAddressRule []interface{}
	for _, depositorAddressItem := range depositorAddress {
		depositorAddressRule = append(depositorAddressRule, depositorAddressItem)
	}

	logs, sub, err := _Staking.contract.FilterLogs(opts, "OnSlashing", depositorAddressRule)
	if err != nil {
		return nil, err
	}
	return &StakingOnSlashingIterator{contract: _Staking.contract, event: "OnSlashing", logs: logs, sub: sub}, nil
}

// WatchOnSlashing is a free log subscription operation binding the contract event 0xcadc6c149d7c30ba433e0a526c9f018a1c4dc5b32099790e4dd9d78a93021810.
//
// Solidity: event OnSlashing(address indexed depositorAddress, uint256 slashedAmount)
func (_Staking *StakingFilterer) WatchOnSlashing(opts *bind.WatchOpts, sink chan<- *StakingOnSlashing, depositorAddress []common.Address) (event.Subscription, error) {

	var depositorAddressRule []interface{}
	for _, depositorAddressItem := range depositorAddress {
		depositorAddressRule = append(depositorAddressRule, depositorAddressItem)
	}

	logs, sub, err := _Staking.contract.WatchLogs(opts, "OnSlashing", depositorAddressRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(StakingOnSlashing)
				if err := _Staking.contract.UnpackLog(event, "OnSlashing", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOnSlashing is a log parse operation binding the contract event 0xcadc6c149d7c30ba433e0a526c9f018a1c4dc5b32099790e4dd9d78a93021810.
//
// Solidity: event OnSlashing(address indexed depositorAddress, uint256 slashedAmount)
func (_Staking *StakingFilterer) ParseOnSlashing(log types.Log) (*StakingOnSlashing, error) {
	event := new(StakingOnSlashing)
	if err := _Staking.contract.UnpackLog(event, "OnSlashing", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
